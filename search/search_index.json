{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python-Bitpin SDK","text":""},{"location":"#about","title":"About","text":"<p>Bitpin is an Iranian cryptocurrency exchange that allows users to buy and sell cryptocurrencies using Iranian Rial (IRR) and Tether (USDT).</p> <p> I'm in no way affiliated with Bitpin and this is not an official SDK.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install using <code>pip</code> from PyPI:</p> <p>pip install python-bitpin</p> <p>Install from <code>git</code></p> <p>pip install git+https://github.com/amiwrpremium/python-bitpin.git</p>"},{"location":"#usage","title":"Usage","text":"<p>See Usage for usage guide.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>See documentation.</p>"},{"location":"#license","title":"License","text":"<p>See LICENSE.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This is not an official SDK, and I am in no way affiliated with Bitpin.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>clients<ul> <li>async_client</li> <li>client</li> <li>core</li> </ul> </li> <li>enums</li> <li>exceptions</li> <li>types</li> </ul>"},{"location":"reference/enums/","title":"enums","text":""},{"location":"reference/enums/#src.bitpin.enums--enums","title":"Enums.","text":"<p>Enum classes for the BitPin API.</p>"},{"location":"reference/enums/#src.bitpin.enums.Enum","title":"<code>Enum</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Enum.</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>class Enum(_Enum, metaclass=EnumMeta):\n    \"\"\"Enum.\"\"\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\n        Representation.\n\n        Returns:\n            str: Representation.\n        \"\"\"\n\n        return f\"{self.__class__.__name__}.{self.name}\"\n\n    def __str__(self) -&gt; str:\n        \"\"\"\n        String representation.\n\n        Returns:\n            str: String representation.\n        \"\"\"\n\n        return str(self.value)\n\n    def __eq__(self, other: Any) -&gt; bool:  # pragma: no cover\n        \"\"\"\n        Equal.\n\n        Args:\n            other (Any): Other.\n\n        Returns:\n            bool: True if equal, else False.\n        \"\"\"\n\n        if isinstance(other, Enum):\n            return self.value == other.value  # type: ignore[no-any-return]  # noqa\n        return self.value == other  # type: ignore[no-any-return]  # noqa\n\n    def __hash__(self) -&gt; int:  # pragma: no cover\n        \"\"\"\n        Hash.\n\n        Returns:\n            int: Hash.\n        \"\"\"\n\n        return hash(self.value)\n\n    @classmethod\n    def _missing_(cls, value: object) -&gt; \"Enum\":\n        \"\"\"\n        Missing.\n\n        Args:\n            value (object): Value.\n\n        Returns:\n            Enum: Enum.\n        \"\"\"\n\n        for member in cls:\n            if isinstance(value, str) and member.value == value.upper():  # pragma: no cover\n                return member\n\n        return super()._missing_(value)  # type: ignore[attribute-error, no-any-return]  # noqa\n\n    @classmethod\n    def get_by_value(cls, value: Any) -&gt; \"Enum\":\n        \"\"\"\n        Get Enum by value.\n\n        Args:\n            value (Any): Value.\n\n        Returns:\n            Enum: Enum.\n        \"\"\"\n\n        for enum in cls:\n            if enum.value.lower() == value.lower():\n                return enum\n        raise ValueError(f\"Invalid value: {value}\")\n\n    @classmethod\n    def get_by_name(cls, name: Any) -&gt; \"Enum\":\n        \"\"\"\n        Get Enum by name.\n\n        Args:\n            name (Any): Name.\n\n        Returns:\n            Enum: Enum.\n        \"\"\"\n\n        for enum in cls:\n            if enum.name.lower() == name.lower():\n                return enum\n        raise ValueError(f\"Invalid name: {name}\")\n\n    @classmethod\n    def get_by_name_or_value(cls, name_or_value: Any) -&gt; \"Enum\":\n        \"\"\"\n        Get Enum by name or value.\n\n        Args:\n            name_or_value (Any): Name or value.\n\n        Returns:\n            Enum: Enum.\n        \"\"\"\n\n        try:\n            return cls.get_by_name(name_or_value)\n        except ValueError:\n            return cls.get_by_value(name_or_value)\n\n    @classmethod\n    def get_all_values(cls) -&gt; List[Any]:\n        \"\"\"Get all values.\"\"\"\n        return [enum.value for enum in cls]\n\n    @classmethod\n    def get_all_names(cls) -&gt; List[str]:\n        \"\"\"Get all names.\"\"\"\n        return [enum.name for enum in cls]\n\n    @classmethod\n    def to_django_choices(cls) -&gt; List[tuple]:\n        \"\"\"Get all names.\"\"\"\n        return [(enum.name, enum.name) for enum in cls]\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.Enum.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Equal.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Any</code> <p>Other.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if equal, else False.</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>def __eq__(self, other: Any) -&gt; bool:  # pragma: no cover\n    \"\"\"\n    Equal.\n\n    Args:\n        other (Any): Other.\n\n    Returns:\n        bool: True if equal, else False.\n    \"\"\"\n\n    if isinstance(other, Enum):\n        return self.value == other.value  # type: ignore[no-any-return]  # noqa\n    return self.value == other  # type: ignore[no-any-return]  # noqa\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.Enum.__hash__","title":"<code>__hash__()</code>","text":"<p>Hash.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Hash.</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>def __hash__(self) -&gt; int:  # pragma: no cover\n    \"\"\"\n    Hash.\n\n    Returns:\n        int: Hash.\n    \"\"\"\n\n    return hash(self.value)\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.Enum.__repr__","title":"<code>__repr__()</code>","text":"<p>Representation.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Representation.</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\n    Representation.\n\n    Returns:\n        str: Representation.\n    \"\"\"\n\n    return f\"{self.__class__.__name__}.{self.name}\"\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.Enum.__str__","title":"<code>__str__()</code>","text":"<p>String representation.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>String representation.</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    String representation.\n\n    Returns:\n        str: String representation.\n    \"\"\"\n\n    return str(self.value)\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.Enum.get_all_names","title":"<code>get_all_names()</code>  <code>classmethod</code>","text":"<p>Get all names.</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>@classmethod\ndef get_all_names(cls) -&gt; List[str]:\n    \"\"\"Get all names.\"\"\"\n    return [enum.name for enum in cls]\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.Enum.get_all_values","title":"<code>get_all_values()</code>  <code>classmethod</code>","text":"<p>Get all values.</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>@classmethod\ndef get_all_values(cls) -&gt; List[Any]:\n    \"\"\"Get all values.\"\"\"\n    return [enum.value for enum in cls]\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.Enum.get_by_name","title":"<code>get_by_name(name)</code>  <code>classmethod</code>","text":"<p>Get Enum by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Any</code> <p>Name.</p> required <p>Returns:</p> Name Type Description <code>Enum</code> <code>Enum</code> <p>Enum.</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>@classmethod\ndef get_by_name(cls, name: Any) -&gt; \"Enum\":\n    \"\"\"\n    Get Enum by name.\n\n    Args:\n        name (Any): Name.\n\n    Returns:\n        Enum: Enum.\n    \"\"\"\n\n    for enum in cls:\n        if enum.name.lower() == name.lower():\n            return enum\n    raise ValueError(f\"Invalid name: {name}\")\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.Enum.get_by_name_or_value","title":"<code>get_by_name_or_value(name_or_value)</code>  <code>classmethod</code>","text":"<p>Get Enum by name or value.</p> <p>Parameters:</p> Name Type Description Default <code>name_or_value</code> <code>Any</code> <p>Name or value.</p> required <p>Returns:</p> Name Type Description <code>Enum</code> <code>Enum</code> <p>Enum.</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>@classmethod\ndef get_by_name_or_value(cls, name_or_value: Any) -&gt; \"Enum\":\n    \"\"\"\n    Get Enum by name or value.\n\n    Args:\n        name_or_value (Any): Name or value.\n\n    Returns:\n        Enum: Enum.\n    \"\"\"\n\n    try:\n        return cls.get_by_name(name_or_value)\n    except ValueError:\n        return cls.get_by_value(name_or_value)\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.Enum.get_by_value","title":"<code>get_by_value(value)</code>  <code>classmethod</code>","text":"<p>Get Enum by value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>Value.</p> required <p>Returns:</p> Name Type Description <code>Enum</code> <code>Enum</code> <p>Enum.</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>@classmethod\ndef get_by_value(cls, value: Any) -&gt; \"Enum\":\n    \"\"\"\n    Get Enum by value.\n\n    Args:\n        value (Any): Value.\n\n    Returns:\n        Enum: Enum.\n    \"\"\"\n\n    for enum in cls:\n        if enum.value.lower() == value.lower():\n            return enum\n    raise ValueError(f\"Invalid value: {value}\")\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.Enum.to_django_choices","title":"<code>to_django_choices()</code>  <code>classmethod</code>","text":"<p>Get all names.</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>@classmethod\ndef to_django_choices(cls) -&gt; List[tuple]:\n    \"\"\"Get all names.\"\"\"\n    return [(enum.name, enum.name) for enum in cls]\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.EnumMeta","title":"<code>EnumMeta</code>","text":"<p>             Bases: <code>EnumMeta</code></p> <p>Enum Meta.</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>class EnumMeta(_EnumMeta):\n    \"\"\"Enum Meta.\"\"\"\n\n    def __call__(cls, value: Any, *args: Any, **kwargs: Any) -&gt; \"Enum\":  # type: ignore[override]\n        \"\"\"Call.\"\"\"\n        if isinstance(value, str):  # pragma: no cover\n            value = value.upper()\n\n        return super().__call__(value, *args, **kwargs)  # type: ignore[no-any-return]  # noqa\n\n    def __contains__(cls, value: Any) -&gt; bool:\n        \"\"\"Contains.\"\"\"\n\n        if isinstance(value, str):\n            return value.upper() in cls._value2member_map_  # type: ignore[attr-defined]  # noqa\n\n        return super().__contains__(value)  # type: ignore[call-arg]  # noqa\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.EnumMeta.__call__","title":"<code>__call__(value, *args, **kwargs)</code>","text":"<p>Call.</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>def __call__(cls, value: Any, *args: Any, **kwargs: Any) -&gt; \"Enum\":  # type: ignore[override]\n    \"\"\"Call.\"\"\"\n    if isinstance(value, str):  # pragma: no cover\n        value = value.upper()\n\n    return super().__call__(value, *args, **kwargs)  # type: ignore[no-any-return]  # noqa\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.EnumMeta.__contains__","title":"<code>__contains__(value)</code>","text":"<p>Contains.</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>def __contains__(cls, value: Any) -&gt; bool:\n    \"\"\"Contains.\"\"\"\n\n    if isinstance(value, str):\n        return value.upper() in cls._value2member_map_  # type: ignore[attr-defined]  # noqa\n\n    return super().__contains__(value)  # type: ignore[call-arg]  # noqa\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.OrderMode","title":"<code>OrderMode</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Order Mode (LIMIT/MARKET/OCO/STOP_LIMIT).</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>class OrderMode(str, Enum):\n    \"\"\"Order Mode (LIMIT/MARKET/OCO/STOP_LIMIT).\"\"\"\n\n    LIMIT = \"limit\"\n    MARKET = \"market\"\n    OCO = \"oco\"\n    STOP_LIMIT = \"stop_limit\"\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.OrderState","title":"<code>OrderState</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Order State (INITIAL/ACTIVE/CLOSED).</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>class OrderState(str, Enum):\n    \"\"\"Order State (INITIAL/ACTIVE/CLOSED).\"\"\"\n\n    INITIAL = \"initial\"\n    ACTIVE = \"active\"\n    CLOSED = \"closed\"\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.OrderType","title":"<code>OrderType</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Order Type (BUY/SELL).</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>class OrderType(str, Enum):\n    \"\"\"Order Type (BUY/SELL).\"\"\"\n\n    BUY = \"buy\"\n    SELL = \"sell\"\n</code></pre>"},{"location":"reference/enums/#src.bitpin.enums.RequestMethod","title":"<code>RequestMethod</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Request Methods (GET/POST/PUT/DELETE).</p> Source code in <code>src/bitpin/enums.py</code> <pre><code>class RequestMethod(str, Enum):\n    \"\"\"Request Methods (GET/POST/PUT/DELETE).\"\"\"\n\n    GET = \"get\"\n    POST = \"post\"\n    PUT = \"put\"\n    DELETE = \"delete\"\n</code></pre>"},{"location":"reference/exceptions/","title":"exceptions","text":""},{"location":"reference/exceptions/#src.bitpin.exceptions--exceptions","title":"Exceptions.","text":"<p>Exceptions for the bitpin package.</p>"},{"location":"reference/exceptions/#src.bitpin.exceptions--description","title":"Description.","text":"<p>This module contains all the exceptions that are raised by the bitpin package.</p>"},{"location":"reference/exceptions/#src.bitpin.exceptions.APIException","title":"<code>APIException</code>","text":"<p>             Bases: <code>Exception</code></p> <p>API Exception.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> <code>result</code> <code>Any</code> <p>Result.</p> <code>status_code</code> <code>int</code> <p>Status code.</p> <code>response</code> <code>Union[Response, ClientResponse]</code> <p>Response.</p> <code>request</code> <code>Union[PreparedRequest, ClientRequest]</code> <p>Request.</p> <code>url</code> <code>str</code> <p>URL.</p> Source code in <code>src/bitpin/exceptions.py</code> <pre><code>class APIException(Exception):\n    \"\"\"\n    API Exception.\n\n    Attributes:\n        message (str): Message.\n        result (t.Any): Result.\n        status_code (int): Status code.\n        response (t.Union[requests.Response, aiohttp.ClientResponse]): Response.\n        request (t.Union[requests.PreparedRequest, aiohttp.ClientRequest]): Request.\n        url (str): URL.\n    \"\"\"\n\n    def __init__(self, response: t.HttpResponses, status_code: int, text: str):\n        \"\"\"\n        Constructor.\n\n        Args:\n            response (t.Union[requests.Response, aiohttp.ClientResponse]): Response.\n            status_code (int): Status code.\n            text (str): Text.\n        \"\"\"\n\n        try:\n            json_res = json.loads(text)\n        except ValueError:\n            self.message = f\"Invalid JSON error message from Bitpin: {response.text}\"\n            self.result = None\n        else:\n            self.message = json_res.get(\"detail\", \"Unknown error\")\n            self.result = json_res.get(\"result\")\n\n        self.status_code = status_code\n        self.response = response\n        self.request = getattr(response, \"request\", None)\n        self.url = getattr(response, \"url\", None)\n\n    def __str__(self) -&gt; str:\n        \"\"\"\n        String representation.\n\n        Returns:\n            str: String representation.\n        \"\"\"\n\n        return f\"APIError(code={self.status_code}): {self.message} | {self.result} | {self.url}\"\n</code></pre>"},{"location":"reference/exceptions/#src.bitpin.exceptions.APIException.__init__","title":"<code>__init__(response, status_code, text)</code>","text":"<p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[Response, ClientResponse]</code> <p>Response.</p> required <code>status_code</code> <code>int</code> <p>Status code.</p> required <code>text</code> <code>str</code> <p>Text.</p> required Source code in <code>src/bitpin/exceptions.py</code> <pre><code>def __init__(self, response: t.HttpResponses, status_code: int, text: str):\n    \"\"\"\n    Constructor.\n\n    Args:\n        response (t.Union[requests.Response, aiohttp.ClientResponse]): Response.\n        status_code (int): Status code.\n        text (str): Text.\n    \"\"\"\n\n    try:\n        json_res = json.loads(text)\n    except ValueError:\n        self.message = f\"Invalid JSON error message from Bitpin: {response.text}\"\n        self.result = None\n    else:\n        self.message = json_res.get(\"detail\", \"Unknown error\")\n        self.result = json_res.get(\"result\")\n\n    self.status_code = status_code\n    self.response = response\n    self.request = getattr(response, \"request\", None)\n    self.url = getattr(response, \"url\", None)\n</code></pre>"},{"location":"reference/exceptions/#src.bitpin.exceptions.APIException.__str__","title":"<code>__str__()</code>","text":"<p>String representation.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>String representation.</p> Source code in <code>src/bitpin/exceptions.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    String representation.\n\n    Returns:\n        str: String representation.\n    \"\"\"\n\n    return f\"APIError(code={self.status_code}): {self.message} | {self.result} | {self.url}\"\n</code></pre>"},{"location":"reference/exceptions/#src.bitpin.exceptions.RequestException","title":"<code>RequestException</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Request Exception.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Message.</p> Source code in <code>src/bitpin/exceptions.py</code> <pre><code>class RequestException(Exception):\n    \"\"\"\n    Request Exception.\n\n    Attributes:\n        message (str): Message.\n    \"\"\"\n\n    def __init__(self, message: str):\n        \"\"\"\n        Constructor.\n\n        Args:\n            message (str): Message.\n        \"\"\"\n\n        self.message = message\n\n    def __str__(self) -&gt; str:\n        \"\"\"\n        String representation.\n\n        Returns:\n            str: String representation.\n        \"\"\"\n\n        return f\"RequestException: {self.message}\"\n</code></pre>"},{"location":"reference/exceptions/#src.bitpin.exceptions.RequestException.__init__","title":"<code>__init__(message)</code>","text":"<p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message.</p> required Source code in <code>src/bitpin/exceptions.py</code> <pre><code>def __init__(self, message: str):\n    \"\"\"\n    Constructor.\n\n    Args:\n        message (str): Message.\n    \"\"\"\n\n    self.message = message\n</code></pre>"},{"location":"reference/exceptions/#src.bitpin.exceptions.RequestException.__str__","title":"<code>__str__()</code>","text":"<p>String representation.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>String representation.</p> Source code in <code>src/bitpin/exceptions.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    String representation.\n\n    Returns:\n        str: String representation.\n    \"\"\"\n\n    return f\"RequestException: {self.message}\"\n</code></pre>"},{"location":"reference/types/","title":"types","text":""},{"location":"reference/types/#src.bitpin.types--types","title":"Types.","text":"<p>Types for Python Bitpin.</p>"},{"location":"reference/types/#src.bitpin.types--description","title":"Description","text":"<p>This file contains all the types used in the project.</p>"},{"location":"reference/clients/","title":"clients","text":""},{"location":"reference/clients/#src.bitpin.clients--bitpin-client","title":"Bitpin Client.","text":"<p>Client for Bitpin API.</p> <p>See API Reference for more information.</p> <p>Client Submodule contains the synchronous client. AsyncClient Submodule contains the asynchronous client. Core Submodule contains the core client.</p>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient","title":"<code>AsyncClient</code>","text":"<p>             Bases: <code>CoreClient</code></p> <p>Async Client.</p> <p>Methods:</p> Name Description <code>login</code> <p>Login and set (refresh_token/access_token)</p> <code>refresh_access_token</code> <p>Refresh token.</p> <code>get_user_info</code> <p>Get user info.</p> <code>get_currencies_info</code> <p>Get currencies info.</p> <code>get_markets_info</code> <p>Get markets info.</p> <code>get_wallets</code> <p>Get wallets.</p> <code>get_orderbook</code> <p>Get orderbook.</p> <code>get_recent_trades</code> <p>Get recent trades.</p> <code>get_user_orders</code> <p>Get user orders.</p> <code>create_order</code> <p>Create order.</p> <code>cancel_order</code> <p>Cancel order.</p> <code>get_user_trades</code> <p>Get user trades.</p> <code>close_connection</code> <p>Close connection.</p> <p>Attributes:</p> Name Type Description <code>session</code> <code>ClientSession</code> <p>Session.</p> <code>loop</code> <code>AbstractEventLoop</code> <p>Event Loop</p> <code>api_key</code> <code>str</code> <p>API key.</p> <code>api_secret</code> <code>str</code> <p>API secret.</p> <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>access_token</code> <code>str</code> <p>Access token.</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>class AsyncClient(CoreClient):\n    \"\"\"\n    Async Client.\n\n    Methods:\n        login: Login and set (refresh_token/access_token)\n        refresh_access_token: Refresh token.\n        get_user_info: Get user info.\n        get_currencies_info: Get currencies info.\n        get_markets_info: Get markets info.\n        get_wallets: Get wallets.\n        get_orderbook: Get orderbook.\n        get_recent_trades: Get recent trades.\n        get_user_orders: Get user orders.\n        create_order: Create order.\n        cancel_order: Cancel order.\n        get_user_trades: Get user trades.\n        close_connection: Close connection.\n\n    Attributes:\n        session (aiohttp.ClientSession): Session.\n        loop (asyncio.AbstractEventLoop): Event Loop\n        api_key (str): API key.\n        api_secret (str): API secret.\n        refresh_token (str): Refresh token.\n        access_token (str): Access token.\n    \"\"\"\n\n    def __init__(  # type: ignore[no-untyped-def]\n        self,\n        api_key: t.OptionalStr = None,\n        api_secret: t.OptionalStr = None,\n        access_token: t.OptionalStr = None,\n        refresh_token: t.OptionalStr = None,\n        requests_params: t.OptionalDictStrAny = None,\n        session_params: t.OptionalDictStrAny = None,\n        loop: t.OptionalEventLoop = None,\n        background_relogin: bool = False,\n        background_relogin_interval: int = 60 * 60 * 24 * 6,\n        background_refresh_token: bool = False,\n        background_refresh_token_interval: int = 60 * 13,\n    ):\n        \"\"\"\n        Constructor.\n\n        Args:\n            api_key (str): API key.\n            api_secret (str): API secret.\n            access_token (str): Access token.\n            refresh_token (str): Refresh token.\n            requests_params (dict): Requests params.\n            session_params (dict): Session params.\n            loop (asyncio.AbstractEventLoop): Event loop.\n            background_relogin (bool): Background refresh.\n            background_relogin_interval (int): Background refresh interval.\n            background_refresh_token (bool): Background refresh token.\n            background_refresh_token_interval (int): Background refresh token interval.\n\n        Notes:\n            If `api_key` and `api_secret` are not provided, they will be read from the environment variables\n            `BITPIN_API_KEY` and `BITPIN_API_SECRET` respectively.\n\n            If `access_token` and `refresh_token` are not provided, they will be read from the environment variables\n            `BITPIN_ACCESS_TOKEN` and `BITPIN_REFRESH_TOKEN` respectively.\n\n            If `requests_params` are provided, they will be used as default for every request.\n\n            If `requests_params` are provided in `kwargs`, they will override existing `requests_params`.\n\n            If `background_relogin` is enabled, access token will be refreshed in background every\n            `background_relogin_interval` seconds.\n\n            If `background_refresh_token` is enabled, refresh token will be refreshed in background every\n            `background_refresh_token_interval` seconds.\n        \"\"\"\n\n        self.loop = loop or get_loop()\n        self._session_params = session_params or {}\n\n        super().__init__(\n            api_key,\n            api_secret,\n            access_token,\n            refresh_token,\n            requests_params,\n            background_relogin,\n            background_relogin_interval,\n            background_refresh_token,\n            background_refresh_token_interval,\n        )\n\n    @classmethod\n    async def create(  # type: ignore[no-untyped-def]\n        cls,\n        api_key: t.OptionalStr = None,\n        api_secret: t.OptionalStr = None,\n        access_token: t.OptionalStr = None,\n        refresh_token: t.OptionalStr = None,\n        requests_params: t.OptionalDictStrAny = None,\n        session_params: t.OptionalDictStrAny = None,\n        loop: t.OptionalEventLoop = None,\n        background_relogin: bool = False,\n        background_relogin_interval: int = 60 * 60 * 24 * 6,\n        background_refresh_token: bool = False,\n        background_refresh_token_interval: int = 60 * 13,\n    ) -&gt; \"AsyncClient\":\n        \"\"\"\n        Create AsyncClient.\n\n        Args:\n            api_key (str): API key.\n            api_secret (str): API secret.\n            access_token (str): Access token.\n            refresh_token (str): Refresh token.\n            requests_params (dict): Requests params.\n            session_params (dict): Session params.\n            loop (asyncio.AbstractEventLoop): Event loop.\n            background_relogin (bool): Background refresh.\n            background_relogin_interval (int): Background refresh interval.\n            background_refresh_token (bool): Background refresh token.\n            background_refresh_token_interval (int): Background refresh token interval.\n\n        Returns:\n            AsyncClient: AsyncClient.\n        \"\"\"\n\n        self = cls(\n            api_key,\n            api_secret,\n            access_token,\n            refresh_token,\n            requests_params,\n            session_params,\n            loop,\n            background_relogin,\n            background_relogin_interval,\n            background_refresh_token,\n            background_refresh_token_interval,\n        )\n\n        await self._handle_login()\n        return self\n\n    def _init_session(self) -&gt; aiohttp.ClientSession:\n        \"\"\"\n        Initialize session.\n\n        Returns:\n            session (aiohttp.ClientSession): Session.\n\n        \"\"\"\n\n        session = aiohttp.ClientSession(\n            loop=self.loop,\n            headers={\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n            },\n            **self._session_params,\n        )\n        return session\n\n    async def _get(  # type: ignore[no-untyped-def, override]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Make a GET request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        return await self._request_api(enums.RequestMethod.GET, path, signed, version, **kwargs)\n\n    async def _post(  # type: ignore[no-untyped-def, override]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Make a POST request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        return await self._request_api(enums.RequestMethod.POST, path, signed, version, **kwargs)\n\n    async def _delete(  # type: ignore[no-untyped-def, override]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Make a DELETE request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        return await self._request_api(enums.RequestMethod.DELETE, path, signed, version, **kwargs)\n\n    async def _request_api(  # type: ignore[no-untyped-def, override]\n        self,\n        method: t.RequestMethods,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Request API.\n\n        Args:\n            method (RequestMethod): Method.\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        uri = self._create_api_uri(path, version)\n        return await self._request(method, uri, signed, **kwargs)\n\n    async def _request(  # type: ignore[no-untyped-def, override]\n        self, method: t.RequestMethods, uri: str, signed: bool, **kwargs\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Request.\n\n        Args:\n            method (RequestMethod): Method.\n            uri (str): URI.\n            signed (bool): Signed.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        kwargs = self._get_request_kwargs(method, signed, **kwargs)\n\n        async with getattr(self.session, method)(uri, **kwargs) as response:\n            self.response = response  # pylint: disable=attribute-defined-outside-init\n            return await self._handle_response(response)\n\n    @staticmethod\n    async def _handle_response(response: aiohttp.ClientResponse) -&gt; t.DictStrAny:  # type: ignore[override]\n        \"\"\"\n        Handle response.\n\n        Args:\n            response (aiohttp.ClientResponse): Response.\n\n        Returns:\n            dict: Response.\n\n        Raises:\n            APIException: API Exception.\n            RequestException: Request Exception.\n        \"\"\"\n\n        if not str(response.status).startswith(\"2\"):\n            raise APIException(response, response.status, await response.text())\n        try:\n            if response.method.lower() == enums.RequestMethod.DELETE:\n                return {\"status\": \"success\", \"id\": response.request_info.url.parts[-2]}\n            return await response.json()  # type: ignore[no-any-return]\n        except ValueError as exc:\n            raise RequestException(f\"Invalid Response: {await response.text()}\") from exc\n\n    async def _background_relogin_task(self) -&gt; None:  # type: ignore[override]\n        \"\"\"Background relogin task.\"\"\"\n\n        while True:\n            try:\n                await self.login()\n                await asyncio.sleep(self._background_relogin_interval)\n            except Exception:  # pylint: disable=broad-except\n                continue\n\n    async def _background_refresh_token_task(self) -&gt; None:  # type: ignore[override]\n        \"\"\"Background refresh token task.\"\"\"\n\n        while True:\n            try:\n                await self.refresh_access_token()\n                await asyncio.sleep(self._background_refresh_token_interval)\n            except Exception:  # pylint: disable=broad-except\n                continue\n\n    async def _handle_login(self) -&gt; None:  # type: ignore[override]\n        \"\"\"Handle login.\"\"\"\n\n        if self.api_key and self.api_secret:\n            await self.login()\n\n        if self._background_relogin:\n            self.loop.create_task(self._background_relogin_task())  # noqa\n\n        if self._background_refresh_token:\n            self.loop.create_task(self._background_refresh_token_task())  # noqa\n\n    async def login(self, **kwargs) -&gt; t.LoginResponse:  # type: ignore[no-untyped-def, override]\n        \"\"\"\n        Login and set (refresh_token/access_token).\n\n        Args:\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (LoginResponse): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#02c24a5326)\n        \"\"\"\n\n        kwargs[\"json\"] = {\"api_key\": self.api_key, \"secret_key\": self.api_secret}\n        _: t.LoginResponse = await self._post(self.LOGIN_URL, **kwargs)  # type: ignore[assignment]\n\n        self.refresh_token = _[\"refresh\"]\n        self.access_token = _[\"access\"]\n\n        return _\n\n    async def refresh_access_token(  # type: ignore[no-untyped-def, override]\n        self, refresh_token: t.OptionalStr = None, **kwargs\n    ) -&gt; t.RefreshTokenResponse:\n        \"\"\"\n        Refresh token.\n\n        Args:\n            refresh_token (str): Refresh token.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (RefreshTokenResponse): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#9b81094f74)\n        \"\"\"\n\n        kwargs[\"json\"] = {\"refresh\": refresh_token or self.refresh_token}\n        _: t.RefreshTokenResponse = await self._post(self.REFRESH_TOKEN_URL, **kwargs)  # type: ignore[assignment]\n\n        self.access_token = _[\"access\"]\n\n        return _\n\n    async def get_user_info(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def, override]\n        \"\"\"\n        Get user info.\n\n        Args:\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#5b3c85d79e)\n        \"\"\"\n\n        return await self._get(self.USER_INFO_URL, signed=True, **kwargs)\n\n    async def get_currencies_info(  # type: ignore[no-untyped-def, override]\n        self, page: int = 1, **kwargs\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Get currencies info.\n\n        Args:\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#7e59da3d0d)\n\n        Notes:\n            Rate limit: 10000/day or 200/minute if you are authenticated.\n        \"\"\"\n\n        return await self._get(self.CURRENCIES_LIST_URL.format(page), **kwargs)\n\n    async def get_markets_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def, override]\n        \"\"\"\n        Get markets info.\n\n        Args:\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#334792bb2b)\n\n        Notes:\n            Rate limit: 10000/day or 200/minute if you are authenticated.\n        \"\"\"\n\n        return await self._get(self.MARKETS_LIST_URL.format(page), **kwargs)\n\n    async def get_wallets(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def, override]\n        \"\"\"\n        Get wallets.\n\n        Args:\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#9b93495188)\n\n        Notes:\n            Rate limit: 10000/day.\n        \"\"\"\n\n        return await self._get(self.WALLETS_URL, signed=True, **kwargs)\n\n    async def get_orderbook(  # type: ignore[no-untyped-def, override]\n        self,\n        market_id: int,\n        type: t.OrderTypes,\n        **kwargs,  # pylint: disable=redefined-builtin\n    ) -&gt; t.OrderbookResponse:\n        \"\"\"\n        Get orderbook.\n\n        Args:\n            market_id (int): Market ID.\n            type (OrderTypes): Type.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#ec7180fc0e)\n        \"\"\"\n        return await self._get(  # type: ignore[return-value]\n            self.ORDERBOOK_URL.format(market_id, str(type)), version=self.PUBLIC_API_VERSION_2, **kwargs\n        )\n\n    async def get_recent_trades(  # type: ignore[no-untyped-def, override]\n        self, market_id: int, **kwargs\n    ) -&gt; t.TradeResponse:\n        \"\"\"\n        Get recent trades.\n\n        Args:\n            market_id (int): Market ID.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#1dd63530b5)\n        \"\"\"\n\n        return await self._get(self.RECENT_TRADES_URL.format(market_id), **kwargs)  # type: ignore[return-value]\n\n    async def get_user_orders(  # type: ignore[no-untyped-def, override]\n        self,\n        market_id: t.OptionalInt = None,\n        type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n        state: t.OptionalStr = None,\n        mode: t.OptionalStr = None,\n        identifier: t.OptionalStr = None,\n        page: int = 1,\n        **kwargs,\n    ) -&gt; t.OpenOrdersResponse:\n        \"\"\"\n        Get user orders.\n\n        Args:\n            market_id (int): Market ID.\n            type (OrderTypes): Type.\n            state (str): State.\n            mode (str): Mode.\n            identifier (str): Identifier.\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#8a7c2a2af5)\n        \"\"\"\n\n        kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n        return await self._get(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n\n    async def create_order(  # type: ignore[no-untyped-def, override]\n        self,\n        market: int,\n        amount1: float,\n        price: float,\n        mode: t.OrderModes,\n        type: t.OrderTypes,  # pylint: disable=redefined-builtin\n        identifier: t.OptionalStr = None,\n        price_limit: t.OptionalFloat = None,\n        price_stop: t.OptionalFloat = None,\n        price_limit_oco: t.OptionalFloat = None,\n        amount2: t.OptionalFloat = None,\n        **kwargs,\n    ) -&gt; t.CreateOrderResponse:\n        \"\"\"\n        Create order.\n\n        Args:\n            market (int): Market.\n            amount1 (float): Amount1.\n            price (float): Price.\n            mode (OrderModes): Mode.\n            type (OrderTypes): Type.\n            identifier (str): Identifier.\n            price_limit (float): Price limit.\n            price_stop (float): Price stop.\n            price_limit_oco (float): Price limit oco.\n            amount2 (float): Amount2.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#34b353d77b)\n        \"\"\"\n\n        kwargs[\"json\"] = {k: v for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n        return await self._post(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n\n    async def cancel_order(  # type: ignore[no-untyped-def, override]\n        self, order_id: str, **kwargs\n    ) -&gt; t.CancelOrderResponse:\n        \"\"\"\n        Cancel order.\n\n        Args:\n            order_id (str): Order ID.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n        \"\"\"\n\n        return await self._delete(self.ORDERS_URL + f\"{order_id}/\", signed=True, **kwargs)  # type: ignore[return-value]\n\n    async def get_user_trades(  # type: ignore[no-untyped-def, override]\n        self,\n        market_id: t.OptionalInt = None,\n        type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n        page: int = 1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Get user trades.\n\n        Args:\n            market_id (int): Market ID.\n            type (OrderTypes): Type.\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n        \"\"\"\n\n        kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n        return await self._get(self.USER_TRADES_URL, signed=True, **kwargs)\n\n    async def close_connection(self) -&gt; None:  # type: ignore[override]\n        \"\"\"Close connection.\"\"\"\n\n        await self.session.close()  # type: ignore[misc]\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.__init__","title":"<code>__init__(api_key=None, api_secret=None, access_token=None, refresh_token=None, requests_params=None, session_params=None, loop=None, background_relogin=False, background_relogin_interval=60 * 60 * 24 * 6, background_refresh_token=False, background_refresh_token_interval=60 * 13)</code>","text":"<p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>API key.</p> <code>None</code> <code>api_secret</code> <code>str</code> <p>API secret.</p> <code>None</code> <code>access_token</code> <code>str</code> <p>Access token.</p> <code>None</code> <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>None</code> <code>requests_params</code> <code>dict</code> <p>Requests params.</p> <code>None</code> <code>session_params</code> <code>dict</code> <p>Session params.</p> <code>None</code> <code>loop</code> <code>AbstractEventLoop</code> <p>Event loop.</p> <code>None</code> <code>background_relogin</code> <code>bool</code> <p>Background refresh.</p> <code>False</code> <code>background_relogin_interval</code> <code>int</code> <p>Background refresh interval.</p> <code>60 * 60 * 24 * 6</code> <code>background_refresh_token</code> <code>bool</code> <p>Background refresh token.</p> <code>False</code> <code>background_refresh_token_interval</code> <code>int</code> <p>Background refresh token interval.</p> <code>60 * 13</code> Notes <p>If <code>api_key</code> and <code>api_secret</code> are not provided, they will be read from the environment variables <code>BITPIN_API_KEY</code> and <code>BITPIN_API_SECRET</code> respectively.</p> <p>If <code>access_token</code> and <code>refresh_token</code> are not provided, they will be read from the environment variables <code>BITPIN_ACCESS_TOKEN</code> and <code>BITPIN_REFRESH_TOKEN</code> respectively.</p> <p>If <code>requests_params</code> are provided, they will be used as default for every request.</p> <p>If <code>requests_params</code> are provided in <code>kwargs</code>, they will override existing <code>requests_params</code>.</p> <p>If <code>background_relogin</code> is enabled, access token will be refreshed in background every <code>background_relogin_interval</code> seconds.</p> <p>If <code>background_refresh_token</code> is enabled, refresh token will be refreshed in background every <code>background_refresh_token_interval</code> seconds.</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>def __init__(  # type: ignore[no-untyped-def]\n    self,\n    api_key: t.OptionalStr = None,\n    api_secret: t.OptionalStr = None,\n    access_token: t.OptionalStr = None,\n    refresh_token: t.OptionalStr = None,\n    requests_params: t.OptionalDictStrAny = None,\n    session_params: t.OptionalDictStrAny = None,\n    loop: t.OptionalEventLoop = None,\n    background_relogin: bool = False,\n    background_relogin_interval: int = 60 * 60 * 24 * 6,\n    background_refresh_token: bool = False,\n    background_refresh_token_interval: int = 60 * 13,\n):\n    \"\"\"\n    Constructor.\n\n    Args:\n        api_key (str): API key.\n        api_secret (str): API secret.\n        access_token (str): Access token.\n        refresh_token (str): Refresh token.\n        requests_params (dict): Requests params.\n        session_params (dict): Session params.\n        loop (asyncio.AbstractEventLoop): Event loop.\n        background_relogin (bool): Background refresh.\n        background_relogin_interval (int): Background refresh interval.\n        background_refresh_token (bool): Background refresh token.\n        background_refresh_token_interval (int): Background refresh token interval.\n\n    Notes:\n        If `api_key` and `api_secret` are not provided, they will be read from the environment variables\n        `BITPIN_API_KEY` and `BITPIN_API_SECRET` respectively.\n\n        If `access_token` and `refresh_token` are not provided, they will be read from the environment variables\n        `BITPIN_ACCESS_TOKEN` and `BITPIN_REFRESH_TOKEN` respectively.\n\n        If `requests_params` are provided, they will be used as default for every request.\n\n        If `requests_params` are provided in `kwargs`, they will override existing `requests_params`.\n\n        If `background_relogin` is enabled, access token will be refreshed in background every\n        `background_relogin_interval` seconds.\n\n        If `background_refresh_token` is enabled, refresh token will be refreshed in background every\n        `background_refresh_token_interval` seconds.\n    \"\"\"\n\n    self.loop = loop or get_loop()\n    self._session_params = session_params or {}\n\n    super().__init__(\n        api_key,\n        api_secret,\n        access_token,\n        refresh_token,\n        requests_params,\n        background_relogin,\n        background_relogin_interval,\n        background_refresh_token,\n        background_refresh_token_interval,\n    )\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.cancel_order","title":"<code>cancel_order(order_id, **kwargs)</code>  <code>async</code>","text":"<p>Cancel order.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>str</code> <p>Order ID.</p> required <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def cancel_order(  # type: ignore[no-untyped-def, override]\n    self, order_id: str, **kwargs\n) -&gt; t.CancelOrderResponse:\n    \"\"\"\n    Cancel order.\n\n    Args:\n        order_id (str): Order ID.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n    \"\"\"\n\n    return await self._delete(self.ORDERS_URL + f\"{order_id}/\", signed=True, **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.close_connection","title":"<code>close_connection()</code>  <code>async</code>","text":"<p>Close connection.</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def close_connection(self) -&gt; None:  # type: ignore[override]\n    \"\"\"Close connection.\"\"\"\n\n    await self.session.close()  # type: ignore[misc]\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.create","title":"<code>create(api_key=None, api_secret=None, access_token=None, refresh_token=None, requests_params=None, session_params=None, loop=None, background_relogin=False, background_relogin_interval=60 * 60 * 24 * 6, background_refresh_token=False, background_refresh_token_interval=60 * 13)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Create AsyncClient.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>API key.</p> <code>None</code> <code>api_secret</code> <code>str</code> <p>API secret.</p> <code>None</code> <code>access_token</code> <code>str</code> <p>Access token.</p> <code>None</code> <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>None</code> <code>requests_params</code> <code>dict</code> <p>Requests params.</p> <code>None</code> <code>session_params</code> <code>dict</code> <p>Session params.</p> <code>None</code> <code>loop</code> <code>AbstractEventLoop</code> <p>Event loop.</p> <code>None</code> <code>background_relogin</code> <code>bool</code> <p>Background refresh.</p> <code>False</code> <code>background_relogin_interval</code> <code>int</code> <p>Background refresh interval.</p> <code>60 * 60 * 24 * 6</code> <code>background_refresh_token</code> <code>bool</code> <p>Background refresh token.</p> <code>False</code> <code>background_refresh_token_interval</code> <code>int</code> <p>Background refresh token interval.</p> <code>60 * 13</code> <p>Returns:</p> Name Type Description <code>AsyncClient</code> <code>AsyncClient</code> <p>AsyncClient.</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>@classmethod\nasync def create(  # type: ignore[no-untyped-def]\n    cls,\n    api_key: t.OptionalStr = None,\n    api_secret: t.OptionalStr = None,\n    access_token: t.OptionalStr = None,\n    refresh_token: t.OptionalStr = None,\n    requests_params: t.OptionalDictStrAny = None,\n    session_params: t.OptionalDictStrAny = None,\n    loop: t.OptionalEventLoop = None,\n    background_relogin: bool = False,\n    background_relogin_interval: int = 60 * 60 * 24 * 6,\n    background_refresh_token: bool = False,\n    background_refresh_token_interval: int = 60 * 13,\n) -&gt; \"AsyncClient\":\n    \"\"\"\n    Create AsyncClient.\n\n    Args:\n        api_key (str): API key.\n        api_secret (str): API secret.\n        access_token (str): Access token.\n        refresh_token (str): Refresh token.\n        requests_params (dict): Requests params.\n        session_params (dict): Session params.\n        loop (asyncio.AbstractEventLoop): Event loop.\n        background_relogin (bool): Background refresh.\n        background_relogin_interval (int): Background refresh interval.\n        background_refresh_token (bool): Background refresh token.\n        background_refresh_token_interval (int): Background refresh token interval.\n\n    Returns:\n        AsyncClient: AsyncClient.\n    \"\"\"\n\n    self = cls(\n        api_key,\n        api_secret,\n        access_token,\n        refresh_token,\n        requests_params,\n        session_params,\n        loop,\n        background_relogin,\n        background_relogin_interval,\n        background_refresh_token,\n        background_refresh_token_interval,\n    )\n\n    await self._handle_login()\n    return self\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.create_order","title":"<code>create_order(market, amount1, price, mode, type, identifier=None, price_limit=None, price_stop=None, price_limit_oco=None, amount2=None, **kwargs)</code>  <code>async</code>","text":"<p>Create order.</p> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>int</code> <p>Market.</p> required <code>amount1</code> <code>float</code> <p>Amount1.</p> required <code>price</code> <code>float</code> <p>Price.</p> required <code>mode</code> <code>OrderModes</code> <p>Mode.</p> required <code>type</code> <code>OrderTypes</code> <p>Type.</p> required <code>identifier</code> <code>str</code> <p>Identifier.</p> <code>None</code> <code>price_limit</code> <code>float</code> <p>Price limit.</p> <code>None</code> <code>price_stop</code> <code>float</code> <p>Price stop.</p> <code>None</code> <code>price_limit_oco</code> <code>float</code> <p>Price limit oco.</p> <code>None</code> <code>amount2</code> <code>float</code> <p>Amount2.</p> <code>None</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def create_order(  # type: ignore[no-untyped-def, override]\n    self,\n    market: int,\n    amount1: float,\n    price: float,\n    mode: t.OrderModes,\n    type: t.OrderTypes,  # pylint: disable=redefined-builtin\n    identifier: t.OptionalStr = None,\n    price_limit: t.OptionalFloat = None,\n    price_stop: t.OptionalFloat = None,\n    price_limit_oco: t.OptionalFloat = None,\n    amount2: t.OptionalFloat = None,\n    **kwargs,\n) -&gt; t.CreateOrderResponse:\n    \"\"\"\n    Create order.\n\n    Args:\n        market (int): Market.\n        amount1 (float): Amount1.\n        price (float): Price.\n        mode (OrderModes): Mode.\n        type (OrderTypes): Type.\n        identifier (str): Identifier.\n        price_limit (float): Price limit.\n        price_stop (float): Price stop.\n        price_limit_oco (float): Price limit oco.\n        amount2 (float): Amount2.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#34b353d77b)\n    \"\"\"\n\n    kwargs[\"json\"] = {k: v for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n    return await self._post(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.get_currencies_info","title":"<code>get_currencies_info(page=1, **kwargs)</code>  <code>async</code>","text":"<p>Get currencies info.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Notes <p>Rate limit: 10000/day or 200/minute if you are authenticated.</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_currencies_info(  # type: ignore[no-untyped-def, override]\n    self, page: int = 1, **kwargs\n) -&gt; t.DictStrAny:\n    \"\"\"\n    Get currencies info.\n\n    Args:\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#7e59da3d0d)\n\n    Notes:\n        Rate limit: 10000/day or 200/minute if you are authenticated.\n    \"\"\"\n\n    return await self._get(self.CURRENCIES_LIST_URL.format(page), **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.get_markets_info","title":"<code>get_markets_info(page=1, **kwargs)</code>  <code>async</code>","text":"<p>Get markets info.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Notes <p>Rate limit: 10000/day or 200/minute if you are authenticated.</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_markets_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def, override]\n    \"\"\"\n    Get markets info.\n\n    Args:\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#334792bb2b)\n\n    Notes:\n        Rate limit: 10000/day or 200/minute if you are authenticated.\n    \"\"\"\n\n    return await self._get(self.MARKETS_LIST_URL.format(page), **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.get_orderbook","title":"<code>get_orderbook(market_id, type, **kwargs)</code>  <code>async</code>","text":"<p>Get orderbook.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> required <code>type</code> <code>OrderTypes</code> <p>Type.</p> required <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_orderbook(  # type: ignore[no-untyped-def, override]\n    self,\n    market_id: int,\n    type: t.OrderTypes,\n    **kwargs,  # pylint: disable=redefined-builtin\n) -&gt; t.OrderbookResponse:\n    \"\"\"\n    Get orderbook.\n\n    Args:\n        market_id (int): Market ID.\n        type (OrderTypes): Type.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#ec7180fc0e)\n    \"\"\"\n    return await self._get(  # type: ignore[return-value]\n        self.ORDERBOOK_URL.format(market_id, str(type)), version=self.PUBLIC_API_VERSION_2, **kwargs\n    )\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.get_recent_trades","title":"<code>get_recent_trades(market_id, **kwargs)</code>  <code>async</code>","text":"<p>Get recent trades.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> required <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_recent_trades(  # type: ignore[no-untyped-def, override]\n    self, market_id: int, **kwargs\n) -&gt; t.TradeResponse:\n    \"\"\"\n    Get recent trades.\n\n    Args:\n        market_id (int): Market ID.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#1dd63530b5)\n    \"\"\"\n\n    return await self._get(self.RECENT_TRADES_URL.format(market_id), **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.get_user_info","title":"<code>get_user_info(**kwargs)</code>  <code>async</code>","text":"<p>Get user info.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_user_info(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def, override]\n    \"\"\"\n    Get user info.\n\n    Args:\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#5b3c85d79e)\n    \"\"\"\n\n    return await self._get(self.USER_INFO_URL, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.get_user_orders","title":"<code>get_user_orders(market_id=None, type=None, state=None, mode=None, identifier=None, page=1, **kwargs)</code>  <code>async</code>","text":"<p>Get user orders.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> <code>None</code> <code>type</code> <code>OrderTypes</code> <p>Type.</p> <code>None</code> <code>state</code> <code>str</code> <p>State.</p> <code>None</code> <code>mode</code> <code>str</code> <p>Mode.</p> <code>None</code> <code>identifier</code> <code>str</code> <p>Identifier.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_user_orders(  # type: ignore[no-untyped-def, override]\n    self,\n    market_id: t.OptionalInt = None,\n    type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n    state: t.OptionalStr = None,\n    mode: t.OptionalStr = None,\n    identifier: t.OptionalStr = None,\n    page: int = 1,\n    **kwargs,\n) -&gt; t.OpenOrdersResponse:\n    \"\"\"\n    Get user orders.\n\n    Args:\n        market_id (int): Market ID.\n        type (OrderTypes): Type.\n        state (str): State.\n        mode (str): Mode.\n        identifier (str): Identifier.\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#8a7c2a2af5)\n    \"\"\"\n\n    kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n    return await self._get(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.get_user_trades","title":"<code>get_user_trades(market_id=None, type=None, page=1, **kwargs)</code>  <code>async</code>","text":"<p>Get user trades.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> <code>None</code> <code>type</code> <code>OrderTypes</code> <p>Type.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_user_trades(  # type: ignore[no-untyped-def, override]\n    self,\n    market_id: t.OptionalInt = None,\n    type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n    page: int = 1,\n    **kwargs,\n) -&gt; t.DictStrAny:\n    \"\"\"\n    Get user trades.\n\n    Args:\n        market_id (int): Market ID.\n        type (OrderTypes): Type.\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n    \"\"\"\n\n    kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n    return await self._get(self.USER_TRADES_URL, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.get_wallets","title":"<code>get_wallets(**kwargs)</code>  <code>async</code>","text":"<p>Get wallets.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Notes <p>Rate limit: 10000/day.</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_wallets(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def, override]\n    \"\"\"\n    Get wallets.\n\n    Args:\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#9b93495188)\n\n    Notes:\n        Rate limit: 10000/day.\n    \"\"\"\n\n    return await self._get(self.WALLETS_URL, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.login","title":"<code>login(**kwargs)</code>  <code>async</code>","text":"<p>Login and set (refresh_token/access_token).</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>LoginResponse</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def login(self, **kwargs) -&gt; t.LoginResponse:  # type: ignore[no-untyped-def, override]\n    \"\"\"\n    Login and set (refresh_token/access_token).\n\n    Args:\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (LoginResponse): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#02c24a5326)\n    \"\"\"\n\n    kwargs[\"json\"] = {\"api_key\": self.api_key, \"secret_key\": self.api_secret}\n    _: t.LoginResponse = await self._post(self.LOGIN_URL, **kwargs)  # type: ignore[assignment]\n\n    self.refresh_token = _[\"refresh\"]\n    self.access_token = _[\"access\"]\n\n    return _\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.AsyncClient.refresh_access_token","title":"<code>refresh_access_token(refresh_token=None, **kwargs)</code>  <code>async</code>","text":"<p>Refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>None</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>RefreshTokenResponse</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def refresh_access_token(  # type: ignore[no-untyped-def, override]\n    self, refresh_token: t.OptionalStr = None, **kwargs\n) -&gt; t.RefreshTokenResponse:\n    \"\"\"\n    Refresh token.\n\n    Args:\n        refresh_token (str): Refresh token.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (RefreshTokenResponse): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#9b81094f74)\n    \"\"\"\n\n    kwargs[\"json\"] = {\"refresh\": refresh_token or self.refresh_token}\n    _: t.RefreshTokenResponse = await self._post(self.REFRESH_TOKEN_URL, **kwargs)  # type: ignore[assignment]\n\n    self.access_token = _[\"access\"]\n\n    return _\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client","title":"<code>Client</code>","text":"<p>             Bases: <code>CoreClient</code></p> <p>Client.</p> <p>Methods:</p> Name Description <code>login</code> <p>Login and set (refresh_token/access_token)</p> <code>refresh_access_token</code> <p>Refresh token.</p> <code>get_user_info</code> <p>Get user info.</p> <code>get_currencies_info</code> <p>Get currencies info.</p> <code>get_markets_info</code> <p>Get markets info.</p> <code>get_wallets</code> <p>Get wallets.</p> <code>get_orderbook</code> <p>Get orderbook.</p> <code>get_recent_trades</code> <p>Get recent trades.</p> <code>get_user_orders</code> <p>Get use orders.</p> <code>create_order</code> <p>Create order.</p> <code>cancel_order</code> <p>Cancel order.</p> <code>get_user_trades</code> <p>Get user trades.</p> <code>close_connection</code> <p>Close connection.</p> <p>Attributes:</p> Name Type Description <code>session</code> <code>ClientSession</code> <p>Session.</p> <code>api_key</code> <code>str</code> <p>API key.</p> <code>api_secret</code> <code>str</code> <p>API secret.</p> <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>access_token</code> <code>str</code> <p>Access token.</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>class Client(CoreClient):\n    \"\"\"\n    Client.\n\n    Methods:\n        login: Login and set (refresh_token/access_token)\n        refresh_access_token: Refresh token.\n        get_user_info: Get user info.\n        get_currencies_info: Get currencies info.\n        get_markets_info: Get markets info.\n        get_wallets: Get wallets.\n        get_orderbook: Get orderbook.\n        get_recent_trades: Get recent trades.\n        get_user_orders: Get use orders.\n        create_order: Create order.\n        cancel_order: Cancel order.\n        get_user_trades: Get user trades.\n        close_connection: Close connection.\n\n    Attributes:\n        session (aiohttp.ClientSession): Session.\n        api_key (str): API key.\n        api_secret (str): API secret.\n        refresh_token (str): Refresh token.\n        access_token (str): Access token.\n    \"\"\"\n\n    def __init__(  # type: ignore[no-untyped-def]\n        self,\n        api_key: t.OptionalStr = None,\n        api_secret: t.OptionalStr = None,\n        access_token: t.OptionalStr = None,\n        refresh_token: t.OptionalStr = None,\n        requests_params: t.OptionalDictStrAny = None,\n        background_relogin: bool = False,\n        background_relogin_interval: int = 60 * 60 * 24 * 6,\n        background_refresh_token: bool = False,\n        background_refresh_token_interval: int = 60 * 13,\n    ):\n        \"\"\"\n        Constructor.\n\n        Args:\n            api_key (str): API key.\n            api_secret (str): API secret.\n            access_token (str): Access token.\n            refresh_token (str): Refresh token.\n            requests_params (dict): Requests params.\n            background_relogin (bool): Background refresh.\n            background_relogin_interval (int): Background refresh interval.\n            background_refresh_token (bool): Background refresh token.\n            background_refresh_token_interval (int): Background refresh token interval.\n\n        Notes:\n            If `api_key` and `api_secret` are not provided, they will be read from the environment variables\n            `BITPIN_API_KEY` and `BITPIN_API_SECRET` respectively.\n\n            If `access_token` and `refresh_token` are not provided, they will be read from the environment variables\n            `BITPIN_ACCESS_TOKEN` and `BITPIN_REFRESH_TOKEN` respectively.\n\n            If `requests_params` are provided, they will be used as default for every request.\n\n            If `requests_params` are provided in `kwargs`, they will override existing `requests_params`.\n\n            If `background_relogin` is enabled, access token will be refreshed in background every\n            `background_relogin_interval` seconds.\n\n            If `background_refresh_token` is enabled, refresh token will be refreshed in background every\n            `background_refresh_token_interval` seconds.\n        \"\"\"\n\n        super().__init__(\n            api_key,\n            api_secret,\n            access_token,\n            refresh_token,\n            requests_params,\n            background_relogin,\n            background_relogin_interval,\n            background_refresh_token,\n            background_refresh_token_interval,\n        )\n\n        self._handle_login()\n\n    def _init_session(self) -&gt; requests.Session:\n        \"\"\"\n        Initialize session.\n\n        Returns:\n            session (aiohttp.ClientSession): Session.\n\n        \"\"\"\n\n        session = requests.Session()\n        session.headers[\"Content-Type\"] = \"application/json\"\n        session.headers[\"Accept\"] = \"application/json\"\n        return session\n\n    def _get(  # type: ignore[no-untyped-def]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Make a GET request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        return self._request_api(enums.RequestMethod.GET, path, signed, version, **kwargs)\n\n    def _post(  # type: ignore[no-untyped-def]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Make a POST request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        return self._request_api(enums.RequestMethod.POST, path, signed, version, **kwargs)\n\n    def _delete(  # type: ignore[no-untyped-def]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Make a DELETE request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        return self._request_api(enums.RequestMethod.DELETE, path, signed, version, **kwargs)\n\n    def _request_api(  # type: ignore[no-untyped-def]\n        self,\n        method: t.RequestMethods,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Request API.\n\n        Args:\n            method (RequestMethod): Method.\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        uri = self._create_api_uri(path, version)\n        return self._request(method, uri, signed, **kwargs)\n\n    def _request(  # type: ignore[no-untyped-def]\n        self, method: t.RequestMethods, uri: str, signed: bool, **kwargs\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Request.\n\n        Args:\n            method (RequestMethod): Method.\n            uri (str): URI.\n            signed (bool): Signed.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        kwargs = self._get_request_kwargs(method, signed, **kwargs)\n\n        with getattr(self.session, method)(uri, **kwargs) as response:\n            self.response = response  # pylint: disable=attribute-defined-outside-init\n            return self._handle_response(response)\n\n    @staticmethod\n    def _handle_response(response: requests.Response) -&gt; t.DictStrAny:  # type: ignore[override]\n        \"\"\"\n        Handle response.\n\n        Args:\n            response (aiohttp.ClientResponse): Response.\n\n        Returns:\n            dict: Response.\n\n        Raises:\n            APIException: API Exception.\n            RequestException: Request Exception.\n        \"\"\"\n\n        if not str(response.status_code).startswith(\"2\"):\n            if response.request.method.lower() == enums.RequestMethod.DELETE:  # type: ignore[union-attr]\n                return {\"status\": \"success\", \"id\": response.request.path_url.split(\"/\")[-2]}\n            raise APIException(response, response.status_code, response.text)\n        try:\n            return response.json()  # type: ignore[no-any-return]\n        except ValueError as exc:\n            raise RequestException(f\"Invalid Response: {response.text}\") from exc\n\n    def _handle_login(self) -&gt; None:\n        \"\"\"Handle login.\"\"\"\n\n        if self.api_key and self.api_secret:\n            self.login()\n\n        if self._background_relogin:\n            Thread(target=self._background_relogin_task, daemon=True).start()\n\n        if self._background_refresh_token:\n            Thread(target=self._background_refresh_token_task, daemon=True).start()\n\n    def _background_relogin_task(self) -&gt; None:\n        \"\"\"Background relogin task.\"\"\"\n\n        while True:\n            try:\n                self.login()\n                time.sleep(self._background_relogin_interval)\n            except Exception:  # pylint: disable=broad-except\n                continue\n\n    def _background_refresh_token_task(self) -&gt; None:\n        \"\"\"Background refresh token task.\"\"\"\n\n        while True:\n            try:\n                self.refresh_access_token()\n                time.sleep(self._background_refresh_token_interval)\n            except Exception:  # pylint: disable=broad-except\n                continue\n\n    def login(self, **kwargs) -&gt; t.LoginResponse:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Login and set (refresh_token/access_token).\n\n        Args:\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (LoginResponse): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#02c24a5326)\n        \"\"\"\n\n        kwargs[\"json\"] = {\"api_key\": self.api_key, \"secret_key\": self.api_secret}\n        _: t.LoginResponse = self._post(self.LOGIN_URL, **kwargs)  # type: ignore[assignment]\n\n        self.refresh_token = _[\"refresh\"]\n        self.access_token = _[\"access\"]\n\n        return _\n\n    def refresh_access_token(  # type: ignore[no-untyped-def]\n        self, refresh_token: t.OptionalStr = None, **kwargs\n    ) -&gt; t.RefreshTokenResponse:\n        \"\"\"\n        Refresh token.\n\n        Args:\n            refresh_token (str): Refresh token.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (RefreshTokenResponse): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#9b81094f74)\n        \"\"\"\n\n        kwargs[\"json\"] = {\"refresh\": refresh_token or self.refresh_token}\n        _: t.RefreshTokenResponse = self._post(self.REFRESH_TOKEN_URL, **kwargs)  # type: ignore[assignment]\n\n        self.access_token = _[\"access\"]\n\n        return _\n\n    def get_user_info(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get user info.\n\n        Args:\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#5b3c85d79e)\n        \"\"\"\n\n        return self._get(self.USER_INFO_URL, signed=True, **kwargs)\n\n    def get_currencies_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get currencies info.\n\n        Args:\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#7e59da3d0d)\n\n        Notes:\n            Rate limit: 10000/day or 200/minute if you are authenticated.\n        \"\"\"\n\n        return self._get(self.CURRENCIES_LIST_URL.format(page), **kwargs)\n\n    def get_markets_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get markets info.\n\n        Args:\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#334792bb2b)\n\n        Notes:\n            Rate limit: 10000/day or 200/minute if you are authenticated.\n        \"\"\"\n\n        return self._get(self.MARKETS_LIST_URL.format(page), **kwargs)\n\n    def get_wallets(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get wallets.\n\n        Args:\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#9b93495188)\n\n        Notes:\n            Rate limit: 10000/day.\n        \"\"\"\n\n        return self._get(self.WALLETS_URL, signed=True, **kwargs)\n\n    def get_orderbook(  # type: ignore[no-untyped-def]\n        self,\n        market_id: int,\n        type: t.OrderTypes,\n        **kwargs,  # pylint: disable=redefined-builtin\n    ) -&gt; t.OrderbookResponse:\n        \"\"\"\n        Get orderbook.\n\n        Args:\n            market_id (int): Market ID.\n            type (OrderTypes): Type.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#ec7180fc0e)\n        \"\"\"\n\n        return self._get(self.ORDERBOOK_URL.format(market_id, str(type)), **kwargs)  # type: ignore[return-value]\n\n    def get_recent_trades(self, market_id: int, **kwargs) -&gt; t.TradeResponse:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get recent trades.\n\n        Args:\n            market_id (int): Market ID.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#1dd63530b5)\n        \"\"\"\n\n        return self._get(self.RECENT_TRADES_URL.format(market_id), **kwargs)  # type: ignore[return-value]\n\n    def get_user_orders(  # type: ignore[no-untyped-def]\n        self,\n        market_id: t.OptionalInt = None,\n        type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n        state: t.OptionalStr = None,\n        mode: t.OptionalStr = None,\n        identifier: t.OptionalStr = None,\n        page: int = 1,\n        **kwargs,\n    ) -&gt; t.OpenOrdersResponse:\n        \"\"\"\n        Get user Orders.\n\n        Args:\n            market_id (int): Market ID.\n            type (OrderTypes): Type.\n            state (str): State.\n            mode (str): Mode.\n            identifier (str): Identifier.\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#8a7c2a2af5)\n        \"\"\"\n\n        kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n        return self._get(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n\n    def create_order(  # type: ignore[no-untyped-def]\n        self,\n        market: int,\n        amount1: float,\n        price: float,\n        mode: t.OrderModes,\n        type: t.OrderTypes,  # pylint: disable=redefined-builtin\n        identifier: t.OptionalStr = None,\n        price_limit: t.OptionalFloat = None,\n        price_stop: t.OptionalFloat = None,\n        price_limit_oco: t.OptionalFloat = None,\n        amount2: t.OptionalFloat = None,\n        **kwargs,\n    ) -&gt; t.CreateOrderResponse:\n        \"\"\"\n        Create order.\n\n        Args:\n            market (int): Market.\n            amount1 (float): Amount1.\n            price (float): Price.\n            mode (OrderModes): Mode.\n            type (OrderTypes): Type.\n            identifier (str): Identifier.\n            price_limit (float): Price limit.\n            price_stop (float): Price stop.\n            price_limit_oco (float): Price limit oco.\n            amount2 (float): Amount2.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#34b353d77b)\n        \"\"\"\n\n        kwargs[\"json\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n        return self._post(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n\n    def cancel_order(self, order_id: str, **kwargs) -&gt; t.CancelOrderResponse:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Cancel order.\n\n        Args:\n            order_id (str): Order ID.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n        \"\"\"\n\n        return self._delete(self.ORDERS_URL + f\"{order_id}/\", signed=True, **kwargs)  # type: ignore[return-value]\n\n    def get_user_trades(  # type: ignore[no-untyped-def]\n        self,\n        market_id: t.OptionalInt = None,\n        type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n        page: int = 1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Get user trades.\n\n        Args:\n            market_id (int): Market ID.\n            type (OrderTypes): Type.\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n        \"\"\"\n\n        kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n        return self._get(self.USER_TRADES_URL, signed=True, **kwargs)\n\n    def close_connection(self) -&gt; None:\n        \"\"\"Close connection.\"\"\"\n\n        self.session.close()\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client.__init__","title":"<code>__init__(api_key=None, api_secret=None, access_token=None, refresh_token=None, requests_params=None, background_relogin=False, background_relogin_interval=60 * 60 * 24 * 6, background_refresh_token=False, background_refresh_token_interval=60 * 13)</code>","text":"<p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>API key.</p> <code>None</code> <code>api_secret</code> <code>str</code> <p>API secret.</p> <code>None</code> <code>access_token</code> <code>str</code> <p>Access token.</p> <code>None</code> <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>None</code> <code>requests_params</code> <code>dict</code> <p>Requests params.</p> <code>None</code> <code>background_relogin</code> <code>bool</code> <p>Background refresh.</p> <code>False</code> <code>background_relogin_interval</code> <code>int</code> <p>Background refresh interval.</p> <code>60 * 60 * 24 * 6</code> <code>background_refresh_token</code> <code>bool</code> <p>Background refresh token.</p> <code>False</code> <code>background_refresh_token_interval</code> <code>int</code> <p>Background refresh token interval.</p> <code>60 * 13</code> Notes <p>If <code>api_key</code> and <code>api_secret</code> are not provided, they will be read from the environment variables <code>BITPIN_API_KEY</code> and <code>BITPIN_API_SECRET</code> respectively.</p> <p>If <code>access_token</code> and <code>refresh_token</code> are not provided, they will be read from the environment variables <code>BITPIN_ACCESS_TOKEN</code> and <code>BITPIN_REFRESH_TOKEN</code> respectively.</p> <p>If <code>requests_params</code> are provided, they will be used as default for every request.</p> <p>If <code>requests_params</code> are provided in <code>kwargs</code>, they will override existing <code>requests_params</code>.</p> <p>If <code>background_relogin</code> is enabled, access token will be refreshed in background every <code>background_relogin_interval</code> seconds.</p> <p>If <code>background_refresh_token</code> is enabled, refresh token will be refreshed in background every <code>background_refresh_token_interval</code> seconds.</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def __init__(  # type: ignore[no-untyped-def]\n    self,\n    api_key: t.OptionalStr = None,\n    api_secret: t.OptionalStr = None,\n    access_token: t.OptionalStr = None,\n    refresh_token: t.OptionalStr = None,\n    requests_params: t.OptionalDictStrAny = None,\n    background_relogin: bool = False,\n    background_relogin_interval: int = 60 * 60 * 24 * 6,\n    background_refresh_token: bool = False,\n    background_refresh_token_interval: int = 60 * 13,\n):\n    \"\"\"\n    Constructor.\n\n    Args:\n        api_key (str): API key.\n        api_secret (str): API secret.\n        access_token (str): Access token.\n        refresh_token (str): Refresh token.\n        requests_params (dict): Requests params.\n        background_relogin (bool): Background refresh.\n        background_relogin_interval (int): Background refresh interval.\n        background_refresh_token (bool): Background refresh token.\n        background_refresh_token_interval (int): Background refresh token interval.\n\n    Notes:\n        If `api_key` and `api_secret` are not provided, they will be read from the environment variables\n        `BITPIN_API_KEY` and `BITPIN_API_SECRET` respectively.\n\n        If `access_token` and `refresh_token` are not provided, they will be read from the environment variables\n        `BITPIN_ACCESS_TOKEN` and `BITPIN_REFRESH_TOKEN` respectively.\n\n        If `requests_params` are provided, they will be used as default for every request.\n\n        If `requests_params` are provided in `kwargs`, they will override existing `requests_params`.\n\n        If `background_relogin` is enabled, access token will be refreshed in background every\n        `background_relogin_interval` seconds.\n\n        If `background_refresh_token` is enabled, refresh token will be refreshed in background every\n        `background_refresh_token_interval` seconds.\n    \"\"\"\n\n    super().__init__(\n        api_key,\n        api_secret,\n        access_token,\n        refresh_token,\n        requests_params,\n        background_relogin,\n        background_relogin_interval,\n        background_refresh_token,\n        background_refresh_token_interval,\n    )\n\n    self._handle_login()\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client.cancel_order","title":"<code>cancel_order(order_id, **kwargs)</code>","text":"<p>Cancel order.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>str</code> <p>Order ID.</p> required <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def cancel_order(self, order_id: str, **kwargs) -&gt; t.CancelOrderResponse:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Cancel order.\n\n    Args:\n        order_id (str): Order ID.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n    \"\"\"\n\n    return self._delete(self.ORDERS_URL + f\"{order_id}/\", signed=True, **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client.close_connection","title":"<code>close_connection()</code>","text":"<p>Close connection.</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def close_connection(self) -&gt; None:\n    \"\"\"Close connection.\"\"\"\n\n    self.session.close()\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client.create_order","title":"<code>create_order(market, amount1, price, mode, type, identifier=None, price_limit=None, price_stop=None, price_limit_oco=None, amount2=None, **kwargs)</code>","text":"<p>Create order.</p> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>int</code> <p>Market.</p> required <code>amount1</code> <code>float</code> <p>Amount1.</p> required <code>price</code> <code>float</code> <p>Price.</p> required <code>mode</code> <code>OrderModes</code> <p>Mode.</p> required <code>type</code> <code>OrderTypes</code> <p>Type.</p> required <code>identifier</code> <code>str</code> <p>Identifier.</p> <code>None</code> <code>price_limit</code> <code>float</code> <p>Price limit.</p> <code>None</code> <code>price_stop</code> <code>float</code> <p>Price stop.</p> <code>None</code> <code>price_limit_oco</code> <code>float</code> <p>Price limit oco.</p> <code>None</code> <code>amount2</code> <code>float</code> <p>Amount2.</p> <code>None</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def create_order(  # type: ignore[no-untyped-def]\n    self,\n    market: int,\n    amount1: float,\n    price: float,\n    mode: t.OrderModes,\n    type: t.OrderTypes,  # pylint: disable=redefined-builtin\n    identifier: t.OptionalStr = None,\n    price_limit: t.OptionalFloat = None,\n    price_stop: t.OptionalFloat = None,\n    price_limit_oco: t.OptionalFloat = None,\n    amount2: t.OptionalFloat = None,\n    **kwargs,\n) -&gt; t.CreateOrderResponse:\n    \"\"\"\n    Create order.\n\n    Args:\n        market (int): Market.\n        amount1 (float): Amount1.\n        price (float): Price.\n        mode (OrderModes): Mode.\n        type (OrderTypes): Type.\n        identifier (str): Identifier.\n        price_limit (float): Price limit.\n        price_stop (float): Price stop.\n        price_limit_oco (float): Price limit oco.\n        amount2 (float): Amount2.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#34b353d77b)\n    \"\"\"\n\n    kwargs[\"json\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n    return self._post(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client.get_currencies_info","title":"<code>get_currencies_info(page=1, **kwargs)</code>","text":"<p>Get currencies info.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Notes <p>Rate limit: 10000/day or 200/minute if you are authenticated.</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_currencies_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get currencies info.\n\n    Args:\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#7e59da3d0d)\n\n    Notes:\n        Rate limit: 10000/day or 200/minute if you are authenticated.\n    \"\"\"\n\n    return self._get(self.CURRENCIES_LIST_URL.format(page), **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client.get_markets_info","title":"<code>get_markets_info(page=1, **kwargs)</code>","text":"<p>Get markets info.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Notes <p>Rate limit: 10000/day or 200/minute if you are authenticated.</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_markets_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get markets info.\n\n    Args:\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#334792bb2b)\n\n    Notes:\n        Rate limit: 10000/day or 200/minute if you are authenticated.\n    \"\"\"\n\n    return self._get(self.MARKETS_LIST_URL.format(page), **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client.get_orderbook","title":"<code>get_orderbook(market_id, type, **kwargs)</code>","text":"<p>Get orderbook.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> required <code>type</code> <code>OrderTypes</code> <p>Type.</p> required <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_orderbook(  # type: ignore[no-untyped-def]\n    self,\n    market_id: int,\n    type: t.OrderTypes,\n    **kwargs,  # pylint: disable=redefined-builtin\n) -&gt; t.OrderbookResponse:\n    \"\"\"\n    Get orderbook.\n\n    Args:\n        market_id (int): Market ID.\n        type (OrderTypes): Type.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#ec7180fc0e)\n    \"\"\"\n\n    return self._get(self.ORDERBOOK_URL.format(market_id, str(type)), **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client.get_recent_trades","title":"<code>get_recent_trades(market_id, **kwargs)</code>","text":"<p>Get recent trades.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> required <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_recent_trades(self, market_id: int, **kwargs) -&gt; t.TradeResponse:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get recent trades.\n\n    Args:\n        market_id (int): Market ID.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#1dd63530b5)\n    \"\"\"\n\n    return self._get(self.RECENT_TRADES_URL.format(market_id), **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client.get_user_info","title":"<code>get_user_info(**kwargs)</code>","text":"<p>Get user info.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_user_info(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get user info.\n\n    Args:\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#5b3c85d79e)\n    \"\"\"\n\n    return self._get(self.USER_INFO_URL, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client.get_user_orders","title":"<code>get_user_orders(market_id=None, type=None, state=None, mode=None, identifier=None, page=1, **kwargs)</code>","text":"<p>Get user Orders.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> <code>None</code> <code>type</code> <code>OrderTypes</code> <p>Type.</p> <code>None</code> <code>state</code> <code>str</code> <p>State.</p> <code>None</code> <code>mode</code> <code>str</code> <p>Mode.</p> <code>None</code> <code>identifier</code> <code>str</code> <p>Identifier.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_user_orders(  # type: ignore[no-untyped-def]\n    self,\n    market_id: t.OptionalInt = None,\n    type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n    state: t.OptionalStr = None,\n    mode: t.OptionalStr = None,\n    identifier: t.OptionalStr = None,\n    page: int = 1,\n    **kwargs,\n) -&gt; t.OpenOrdersResponse:\n    \"\"\"\n    Get user Orders.\n\n    Args:\n        market_id (int): Market ID.\n        type (OrderTypes): Type.\n        state (str): State.\n        mode (str): Mode.\n        identifier (str): Identifier.\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#8a7c2a2af5)\n    \"\"\"\n\n    kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n    return self._get(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client.get_user_trades","title":"<code>get_user_trades(market_id=None, type=None, page=1, **kwargs)</code>","text":"<p>Get user trades.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> <code>None</code> <code>type</code> <code>OrderTypes</code> <p>Type.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_user_trades(  # type: ignore[no-untyped-def]\n    self,\n    market_id: t.OptionalInt = None,\n    type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n    page: int = 1,\n    **kwargs,\n) -&gt; t.DictStrAny:\n    \"\"\"\n    Get user trades.\n\n    Args:\n        market_id (int): Market ID.\n        type (OrderTypes): Type.\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n    \"\"\"\n\n    kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n    return self._get(self.USER_TRADES_URL, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client.get_wallets","title":"<code>get_wallets(**kwargs)</code>","text":"<p>Get wallets.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Notes <p>Rate limit: 10000/day.</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_wallets(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get wallets.\n\n    Args:\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#9b93495188)\n\n    Notes:\n        Rate limit: 10000/day.\n    \"\"\"\n\n    return self._get(self.WALLETS_URL, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client.login","title":"<code>login(**kwargs)</code>","text":"<p>Login and set (refresh_token/access_token).</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>LoginResponse</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def login(self, **kwargs) -&gt; t.LoginResponse:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Login and set (refresh_token/access_token).\n\n    Args:\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (LoginResponse): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#02c24a5326)\n    \"\"\"\n\n    kwargs[\"json\"] = {\"api_key\": self.api_key, \"secret_key\": self.api_secret}\n    _: t.LoginResponse = self._post(self.LOGIN_URL, **kwargs)  # type: ignore[assignment]\n\n    self.refresh_token = _[\"refresh\"]\n    self.access_token = _[\"access\"]\n\n    return _\n</code></pre>"},{"location":"reference/clients/#src.bitpin.clients.Client.refresh_access_token","title":"<code>refresh_access_token(refresh_token=None, **kwargs)</code>","text":"<p>Refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>None</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>RefreshTokenResponse</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def refresh_access_token(  # type: ignore[no-untyped-def]\n    self, refresh_token: t.OptionalStr = None, **kwargs\n) -&gt; t.RefreshTokenResponse:\n    \"\"\"\n    Refresh token.\n\n    Args:\n        refresh_token (str): Refresh token.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (RefreshTokenResponse): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#9b81094f74)\n    \"\"\"\n\n    kwargs[\"json\"] = {\"refresh\": refresh_token or self.refresh_token}\n    _: t.RefreshTokenResponse = self._post(self.REFRESH_TOKEN_URL, **kwargs)  # type: ignore[assignment]\n\n    self.access_token = _[\"access\"]\n\n    return _\n</code></pre>"},{"location":"reference/clients/async_client/","title":"async_client","text":""},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client--bitpin-async-client","title":"Bitpin Async Client.","text":""},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient","title":"<code>AsyncClient</code>","text":"<p>             Bases: <code>CoreClient</code></p> <p>Async Client.</p> <p>Methods:</p> Name Description <code>login</code> <p>Login and set (refresh_token/access_token)</p> <code>refresh_access_token</code> <p>Refresh token.</p> <code>get_user_info</code> <p>Get user info.</p> <code>get_currencies_info</code> <p>Get currencies info.</p> <code>get_markets_info</code> <p>Get markets info.</p> <code>get_wallets</code> <p>Get wallets.</p> <code>get_orderbook</code> <p>Get orderbook.</p> <code>get_recent_trades</code> <p>Get recent trades.</p> <code>get_user_orders</code> <p>Get user orders.</p> <code>create_order</code> <p>Create order.</p> <code>cancel_order</code> <p>Cancel order.</p> <code>get_user_trades</code> <p>Get user trades.</p> <code>close_connection</code> <p>Close connection.</p> <p>Attributes:</p> Name Type Description <code>session</code> <code>ClientSession</code> <p>Session.</p> <code>loop</code> <code>AbstractEventLoop</code> <p>Event Loop</p> <code>api_key</code> <code>str</code> <p>API key.</p> <code>api_secret</code> <code>str</code> <p>API secret.</p> <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>access_token</code> <code>str</code> <p>Access token.</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>class AsyncClient(CoreClient):\n    \"\"\"\n    Async Client.\n\n    Methods:\n        login: Login and set (refresh_token/access_token)\n        refresh_access_token: Refresh token.\n        get_user_info: Get user info.\n        get_currencies_info: Get currencies info.\n        get_markets_info: Get markets info.\n        get_wallets: Get wallets.\n        get_orderbook: Get orderbook.\n        get_recent_trades: Get recent trades.\n        get_user_orders: Get user orders.\n        create_order: Create order.\n        cancel_order: Cancel order.\n        get_user_trades: Get user trades.\n        close_connection: Close connection.\n\n    Attributes:\n        session (aiohttp.ClientSession): Session.\n        loop (asyncio.AbstractEventLoop): Event Loop\n        api_key (str): API key.\n        api_secret (str): API secret.\n        refresh_token (str): Refresh token.\n        access_token (str): Access token.\n    \"\"\"\n\n    def __init__(  # type: ignore[no-untyped-def]\n        self,\n        api_key: t.OptionalStr = None,\n        api_secret: t.OptionalStr = None,\n        access_token: t.OptionalStr = None,\n        refresh_token: t.OptionalStr = None,\n        requests_params: t.OptionalDictStrAny = None,\n        session_params: t.OptionalDictStrAny = None,\n        loop: t.OptionalEventLoop = None,\n        background_relogin: bool = False,\n        background_relogin_interval: int = 60 * 60 * 24 * 6,\n        background_refresh_token: bool = False,\n        background_refresh_token_interval: int = 60 * 13,\n    ):\n        \"\"\"\n        Constructor.\n\n        Args:\n            api_key (str): API key.\n            api_secret (str): API secret.\n            access_token (str): Access token.\n            refresh_token (str): Refresh token.\n            requests_params (dict): Requests params.\n            session_params (dict): Session params.\n            loop (asyncio.AbstractEventLoop): Event loop.\n            background_relogin (bool): Background refresh.\n            background_relogin_interval (int): Background refresh interval.\n            background_refresh_token (bool): Background refresh token.\n            background_refresh_token_interval (int): Background refresh token interval.\n\n        Notes:\n            If `api_key` and `api_secret` are not provided, they will be read from the environment variables\n            `BITPIN_API_KEY` and `BITPIN_API_SECRET` respectively.\n\n            If `access_token` and `refresh_token` are not provided, they will be read from the environment variables\n            `BITPIN_ACCESS_TOKEN` and `BITPIN_REFRESH_TOKEN` respectively.\n\n            If `requests_params` are provided, they will be used as default for every request.\n\n            If `requests_params` are provided in `kwargs`, they will override existing `requests_params`.\n\n            If `background_relogin` is enabled, access token will be refreshed in background every\n            `background_relogin_interval` seconds.\n\n            If `background_refresh_token` is enabled, refresh token will be refreshed in background every\n            `background_refresh_token_interval` seconds.\n        \"\"\"\n\n        self.loop = loop or get_loop()\n        self._session_params = session_params or {}\n\n        super().__init__(\n            api_key,\n            api_secret,\n            access_token,\n            refresh_token,\n            requests_params,\n            background_relogin,\n            background_relogin_interval,\n            background_refresh_token,\n            background_refresh_token_interval,\n        )\n\n    @classmethod\n    async def create(  # type: ignore[no-untyped-def]\n        cls,\n        api_key: t.OptionalStr = None,\n        api_secret: t.OptionalStr = None,\n        access_token: t.OptionalStr = None,\n        refresh_token: t.OptionalStr = None,\n        requests_params: t.OptionalDictStrAny = None,\n        session_params: t.OptionalDictStrAny = None,\n        loop: t.OptionalEventLoop = None,\n        background_relogin: bool = False,\n        background_relogin_interval: int = 60 * 60 * 24 * 6,\n        background_refresh_token: bool = False,\n        background_refresh_token_interval: int = 60 * 13,\n    ) -&gt; \"AsyncClient\":\n        \"\"\"\n        Create AsyncClient.\n\n        Args:\n            api_key (str): API key.\n            api_secret (str): API secret.\n            access_token (str): Access token.\n            refresh_token (str): Refresh token.\n            requests_params (dict): Requests params.\n            session_params (dict): Session params.\n            loop (asyncio.AbstractEventLoop): Event loop.\n            background_relogin (bool): Background refresh.\n            background_relogin_interval (int): Background refresh interval.\n            background_refresh_token (bool): Background refresh token.\n            background_refresh_token_interval (int): Background refresh token interval.\n\n        Returns:\n            AsyncClient: AsyncClient.\n        \"\"\"\n\n        self = cls(\n            api_key,\n            api_secret,\n            access_token,\n            refresh_token,\n            requests_params,\n            session_params,\n            loop,\n            background_relogin,\n            background_relogin_interval,\n            background_refresh_token,\n            background_refresh_token_interval,\n        )\n\n        await self._handle_login()\n        return self\n\n    def _init_session(self) -&gt; aiohttp.ClientSession:\n        \"\"\"\n        Initialize session.\n\n        Returns:\n            session (aiohttp.ClientSession): Session.\n\n        \"\"\"\n\n        session = aiohttp.ClientSession(\n            loop=self.loop,\n            headers={\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n            },\n            **self._session_params,\n        )\n        return session\n\n    async def _get(  # type: ignore[no-untyped-def, override]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Make a GET request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        return await self._request_api(enums.RequestMethod.GET, path, signed, version, **kwargs)\n\n    async def _post(  # type: ignore[no-untyped-def, override]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Make a POST request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        return await self._request_api(enums.RequestMethod.POST, path, signed, version, **kwargs)\n\n    async def _delete(  # type: ignore[no-untyped-def, override]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Make a DELETE request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        return await self._request_api(enums.RequestMethod.DELETE, path, signed, version, **kwargs)\n\n    async def _request_api(  # type: ignore[no-untyped-def, override]\n        self,\n        method: t.RequestMethods,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Request API.\n\n        Args:\n            method (RequestMethod): Method.\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        uri = self._create_api_uri(path, version)\n        return await self._request(method, uri, signed, **kwargs)\n\n    async def _request(  # type: ignore[no-untyped-def, override]\n        self, method: t.RequestMethods, uri: str, signed: bool, **kwargs\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Request.\n\n        Args:\n            method (RequestMethod): Method.\n            uri (str): URI.\n            signed (bool): Signed.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        kwargs = self._get_request_kwargs(method, signed, **kwargs)\n\n        async with getattr(self.session, method)(uri, **kwargs) as response:\n            self.response = response  # pylint: disable=attribute-defined-outside-init\n            return await self._handle_response(response)\n\n    @staticmethod\n    async def _handle_response(response: aiohttp.ClientResponse) -&gt; t.DictStrAny:  # type: ignore[override]\n        \"\"\"\n        Handle response.\n\n        Args:\n            response (aiohttp.ClientResponse): Response.\n\n        Returns:\n            dict: Response.\n\n        Raises:\n            APIException: API Exception.\n            RequestException: Request Exception.\n        \"\"\"\n\n        if not str(response.status).startswith(\"2\"):\n            raise APIException(response, response.status, await response.text())\n        try:\n            if response.method.lower() == enums.RequestMethod.DELETE:\n                return {\"status\": \"success\", \"id\": response.request_info.url.parts[-2]}\n            return await response.json()  # type: ignore[no-any-return]\n        except ValueError as exc:\n            raise RequestException(f\"Invalid Response: {await response.text()}\") from exc\n\n    async def _background_relogin_task(self) -&gt; None:  # type: ignore[override]\n        \"\"\"Background relogin task.\"\"\"\n\n        while True:\n            try:\n                await self.login()\n                await asyncio.sleep(self._background_relogin_interval)\n            except Exception:  # pylint: disable=broad-except\n                continue\n\n    async def _background_refresh_token_task(self) -&gt; None:  # type: ignore[override]\n        \"\"\"Background refresh token task.\"\"\"\n\n        while True:\n            try:\n                await self.refresh_access_token()\n                await asyncio.sleep(self._background_refresh_token_interval)\n            except Exception:  # pylint: disable=broad-except\n                continue\n\n    async def _handle_login(self) -&gt; None:  # type: ignore[override]\n        \"\"\"Handle login.\"\"\"\n\n        if self.api_key and self.api_secret:\n            await self.login()\n\n        if self._background_relogin:\n            self.loop.create_task(self._background_relogin_task())  # noqa\n\n        if self._background_refresh_token:\n            self.loop.create_task(self._background_refresh_token_task())  # noqa\n\n    async def login(self, **kwargs) -&gt; t.LoginResponse:  # type: ignore[no-untyped-def, override]\n        \"\"\"\n        Login and set (refresh_token/access_token).\n\n        Args:\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (LoginResponse): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#02c24a5326)\n        \"\"\"\n\n        kwargs[\"json\"] = {\"api_key\": self.api_key, \"secret_key\": self.api_secret}\n        _: t.LoginResponse = await self._post(self.LOGIN_URL, **kwargs)  # type: ignore[assignment]\n\n        self.refresh_token = _[\"refresh\"]\n        self.access_token = _[\"access\"]\n\n        return _\n\n    async def refresh_access_token(  # type: ignore[no-untyped-def, override]\n        self, refresh_token: t.OptionalStr = None, **kwargs\n    ) -&gt; t.RefreshTokenResponse:\n        \"\"\"\n        Refresh token.\n\n        Args:\n            refresh_token (str): Refresh token.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (RefreshTokenResponse): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#9b81094f74)\n        \"\"\"\n\n        kwargs[\"json\"] = {\"refresh\": refresh_token or self.refresh_token}\n        _: t.RefreshTokenResponse = await self._post(self.REFRESH_TOKEN_URL, **kwargs)  # type: ignore[assignment]\n\n        self.access_token = _[\"access\"]\n\n        return _\n\n    async def get_user_info(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def, override]\n        \"\"\"\n        Get user info.\n\n        Args:\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#5b3c85d79e)\n        \"\"\"\n\n        return await self._get(self.USER_INFO_URL, signed=True, **kwargs)\n\n    async def get_currencies_info(  # type: ignore[no-untyped-def, override]\n        self, page: int = 1, **kwargs\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Get currencies info.\n\n        Args:\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#7e59da3d0d)\n\n        Notes:\n            Rate limit: 10000/day or 200/minute if you are authenticated.\n        \"\"\"\n\n        return await self._get(self.CURRENCIES_LIST_URL.format(page), **kwargs)\n\n    async def get_markets_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def, override]\n        \"\"\"\n        Get markets info.\n\n        Args:\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#334792bb2b)\n\n        Notes:\n            Rate limit: 10000/day or 200/minute if you are authenticated.\n        \"\"\"\n\n        return await self._get(self.MARKETS_LIST_URL.format(page), **kwargs)\n\n    async def get_wallets(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def, override]\n        \"\"\"\n        Get wallets.\n\n        Args:\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#9b93495188)\n\n        Notes:\n            Rate limit: 10000/day.\n        \"\"\"\n\n        return await self._get(self.WALLETS_URL, signed=True, **kwargs)\n\n    async def get_orderbook(  # type: ignore[no-untyped-def, override]\n        self,\n        market_id: int,\n        type: t.OrderTypes,\n        **kwargs,  # pylint: disable=redefined-builtin\n    ) -&gt; t.OrderbookResponse:\n        \"\"\"\n        Get orderbook.\n\n        Args:\n            market_id (int): Market ID.\n            type (OrderTypes): Type.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#ec7180fc0e)\n        \"\"\"\n        return await self._get(  # type: ignore[return-value]\n            self.ORDERBOOK_URL.format(market_id, str(type)), version=self.PUBLIC_API_VERSION_2, **kwargs\n        )\n\n    async def get_recent_trades(  # type: ignore[no-untyped-def, override]\n        self, market_id: int, **kwargs\n    ) -&gt; t.TradeResponse:\n        \"\"\"\n        Get recent trades.\n\n        Args:\n            market_id (int): Market ID.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#1dd63530b5)\n        \"\"\"\n\n        return await self._get(self.RECENT_TRADES_URL.format(market_id), **kwargs)  # type: ignore[return-value]\n\n    async def get_user_orders(  # type: ignore[no-untyped-def, override]\n        self,\n        market_id: t.OptionalInt = None,\n        type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n        state: t.OptionalStr = None,\n        mode: t.OptionalStr = None,\n        identifier: t.OptionalStr = None,\n        page: int = 1,\n        **kwargs,\n    ) -&gt; t.OpenOrdersResponse:\n        \"\"\"\n        Get user orders.\n\n        Args:\n            market_id (int): Market ID.\n            type (OrderTypes): Type.\n            state (str): State.\n            mode (str): Mode.\n            identifier (str): Identifier.\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#8a7c2a2af5)\n        \"\"\"\n\n        kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n        return await self._get(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n\n    async def create_order(  # type: ignore[no-untyped-def, override]\n        self,\n        market: int,\n        amount1: float,\n        price: float,\n        mode: t.OrderModes,\n        type: t.OrderTypes,  # pylint: disable=redefined-builtin\n        identifier: t.OptionalStr = None,\n        price_limit: t.OptionalFloat = None,\n        price_stop: t.OptionalFloat = None,\n        price_limit_oco: t.OptionalFloat = None,\n        amount2: t.OptionalFloat = None,\n        **kwargs,\n    ) -&gt; t.CreateOrderResponse:\n        \"\"\"\n        Create order.\n\n        Args:\n            market (int): Market.\n            amount1 (float): Amount1.\n            price (float): Price.\n            mode (OrderModes): Mode.\n            type (OrderTypes): Type.\n            identifier (str): Identifier.\n            price_limit (float): Price limit.\n            price_stop (float): Price stop.\n            price_limit_oco (float): Price limit oco.\n            amount2 (float): Amount2.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#34b353d77b)\n        \"\"\"\n\n        kwargs[\"json\"] = {k: v for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n        return await self._post(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n\n    async def cancel_order(  # type: ignore[no-untyped-def, override]\n        self, order_id: str, **kwargs\n    ) -&gt; t.CancelOrderResponse:\n        \"\"\"\n        Cancel order.\n\n        Args:\n            order_id (str): Order ID.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n        \"\"\"\n\n        return await self._delete(self.ORDERS_URL + f\"{order_id}/\", signed=True, **kwargs)  # type: ignore[return-value]\n\n    async def get_user_trades(  # type: ignore[no-untyped-def, override]\n        self,\n        market_id: t.OptionalInt = None,\n        type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n        page: int = 1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Get user trades.\n\n        Args:\n            market_id (int): Market ID.\n            type (OrderTypes): Type.\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n        \"\"\"\n\n        kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n        return await self._get(self.USER_TRADES_URL, signed=True, **kwargs)\n\n    async def close_connection(self) -&gt; None:  # type: ignore[override]\n        \"\"\"Close connection.\"\"\"\n\n        await self.session.close()  # type: ignore[misc]\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.__init__","title":"<code>__init__(api_key=None, api_secret=None, access_token=None, refresh_token=None, requests_params=None, session_params=None, loop=None, background_relogin=False, background_relogin_interval=60 * 60 * 24 * 6, background_refresh_token=False, background_refresh_token_interval=60 * 13)</code>","text":"<p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>API key.</p> <code>None</code> <code>api_secret</code> <code>str</code> <p>API secret.</p> <code>None</code> <code>access_token</code> <code>str</code> <p>Access token.</p> <code>None</code> <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>None</code> <code>requests_params</code> <code>dict</code> <p>Requests params.</p> <code>None</code> <code>session_params</code> <code>dict</code> <p>Session params.</p> <code>None</code> <code>loop</code> <code>AbstractEventLoop</code> <p>Event loop.</p> <code>None</code> <code>background_relogin</code> <code>bool</code> <p>Background refresh.</p> <code>False</code> <code>background_relogin_interval</code> <code>int</code> <p>Background refresh interval.</p> <code>60 * 60 * 24 * 6</code> <code>background_refresh_token</code> <code>bool</code> <p>Background refresh token.</p> <code>False</code> <code>background_refresh_token_interval</code> <code>int</code> <p>Background refresh token interval.</p> <code>60 * 13</code> Notes <p>If <code>api_key</code> and <code>api_secret</code> are not provided, they will be read from the environment variables <code>BITPIN_API_KEY</code> and <code>BITPIN_API_SECRET</code> respectively.</p> <p>If <code>access_token</code> and <code>refresh_token</code> are not provided, they will be read from the environment variables <code>BITPIN_ACCESS_TOKEN</code> and <code>BITPIN_REFRESH_TOKEN</code> respectively.</p> <p>If <code>requests_params</code> are provided, they will be used as default for every request.</p> <p>If <code>requests_params</code> are provided in <code>kwargs</code>, they will override existing <code>requests_params</code>.</p> <p>If <code>background_relogin</code> is enabled, access token will be refreshed in background every <code>background_relogin_interval</code> seconds.</p> <p>If <code>background_refresh_token</code> is enabled, refresh token will be refreshed in background every <code>background_refresh_token_interval</code> seconds.</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>def __init__(  # type: ignore[no-untyped-def]\n    self,\n    api_key: t.OptionalStr = None,\n    api_secret: t.OptionalStr = None,\n    access_token: t.OptionalStr = None,\n    refresh_token: t.OptionalStr = None,\n    requests_params: t.OptionalDictStrAny = None,\n    session_params: t.OptionalDictStrAny = None,\n    loop: t.OptionalEventLoop = None,\n    background_relogin: bool = False,\n    background_relogin_interval: int = 60 * 60 * 24 * 6,\n    background_refresh_token: bool = False,\n    background_refresh_token_interval: int = 60 * 13,\n):\n    \"\"\"\n    Constructor.\n\n    Args:\n        api_key (str): API key.\n        api_secret (str): API secret.\n        access_token (str): Access token.\n        refresh_token (str): Refresh token.\n        requests_params (dict): Requests params.\n        session_params (dict): Session params.\n        loop (asyncio.AbstractEventLoop): Event loop.\n        background_relogin (bool): Background refresh.\n        background_relogin_interval (int): Background refresh interval.\n        background_refresh_token (bool): Background refresh token.\n        background_refresh_token_interval (int): Background refresh token interval.\n\n    Notes:\n        If `api_key` and `api_secret` are not provided, they will be read from the environment variables\n        `BITPIN_API_KEY` and `BITPIN_API_SECRET` respectively.\n\n        If `access_token` and `refresh_token` are not provided, they will be read from the environment variables\n        `BITPIN_ACCESS_TOKEN` and `BITPIN_REFRESH_TOKEN` respectively.\n\n        If `requests_params` are provided, they will be used as default for every request.\n\n        If `requests_params` are provided in `kwargs`, they will override existing `requests_params`.\n\n        If `background_relogin` is enabled, access token will be refreshed in background every\n        `background_relogin_interval` seconds.\n\n        If `background_refresh_token` is enabled, refresh token will be refreshed in background every\n        `background_refresh_token_interval` seconds.\n    \"\"\"\n\n    self.loop = loop or get_loop()\n    self._session_params = session_params or {}\n\n    super().__init__(\n        api_key,\n        api_secret,\n        access_token,\n        refresh_token,\n        requests_params,\n        background_relogin,\n        background_relogin_interval,\n        background_refresh_token,\n        background_refresh_token_interval,\n    )\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.cancel_order","title":"<code>cancel_order(order_id, **kwargs)</code>  <code>async</code>","text":"<p>Cancel order.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>str</code> <p>Order ID.</p> required <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def cancel_order(  # type: ignore[no-untyped-def, override]\n    self, order_id: str, **kwargs\n) -&gt; t.CancelOrderResponse:\n    \"\"\"\n    Cancel order.\n\n    Args:\n        order_id (str): Order ID.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n    \"\"\"\n\n    return await self._delete(self.ORDERS_URL + f\"{order_id}/\", signed=True, **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.close_connection","title":"<code>close_connection()</code>  <code>async</code>","text":"<p>Close connection.</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def close_connection(self) -&gt; None:  # type: ignore[override]\n    \"\"\"Close connection.\"\"\"\n\n    await self.session.close()  # type: ignore[misc]\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.create","title":"<code>create(api_key=None, api_secret=None, access_token=None, refresh_token=None, requests_params=None, session_params=None, loop=None, background_relogin=False, background_relogin_interval=60 * 60 * 24 * 6, background_refresh_token=False, background_refresh_token_interval=60 * 13)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Create AsyncClient.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>API key.</p> <code>None</code> <code>api_secret</code> <code>str</code> <p>API secret.</p> <code>None</code> <code>access_token</code> <code>str</code> <p>Access token.</p> <code>None</code> <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>None</code> <code>requests_params</code> <code>dict</code> <p>Requests params.</p> <code>None</code> <code>session_params</code> <code>dict</code> <p>Session params.</p> <code>None</code> <code>loop</code> <code>AbstractEventLoop</code> <p>Event loop.</p> <code>None</code> <code>background_relogin</code> <code>bool</code> <p>Background refresh.</p> <code>False</code> <code>background_relogin_interval</code> <code>int</code> <p>Background refresh interval.</p> <code>60 * 60 * 24 * 6</code> <code>background_refresh_token</code> <code>bool</code> <p>Background refresh token.</p> <code>False</code> <code>background_refresh_token_interval</code> <code>int</code> <p>Background refresh token interval.</p> <code>60 * 13</code> <p>Returns:</p> Name Type Description <code>AsyncClient</code> <code>AsyncClient</code> <p>AsyncClient.</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>@classmethod\nasync def create(  # type: ignore[no-untyped-def]\n    cls,\n    api_key: t.OptionalStr = None,\n    api_secret: t.OptionalStr = None,\n    access_token: t.OptionalStr = None,\n    refresh_token: t.OptionalStr = None,\n    requests_params: t.OptionalDictStrAny = None,\n    session_params: t.OptionalDictStrAny = None,\n    loop: t.OptionalEventLoop = None,\n    background_relogin: bool = False,\n    background_relogin_interval: int = 60 * 60 * 24 * 6,\n    background_refresh_token: bool = False,\n    background_refresh_token_interval: int = 60 * 13,\n) -&gt; \"AsyncClient\":\n    \"\"\"\n    Create AsyncClient.\n\n    Args:\n        api_key (str): API key.\n        api_secret (str): API secret.\n        access_token (str): Access token.\n        refresh_token (str): Refresh token.\n        requests_params (dict): Requests params.\n        session_params (dict): Session params.\n        loop (asyncio.AbstractEventLoop): Event loop.\n        background_relogin (bool): Background refresh.\n        background_relogin_interval (int): Background refresh interval.\n        background_refresh_token (bool): Background refresh token.\n        background_refresh_token_interval (int): Background refresh token interval.\n\n    Returns:\n        AsyncClient: AsyncClient.\n    \"\"\"\n\n    self = cls(\n        api_key,\n        api_secret,\n        access_token,\n        refresh_token,\n        requests_params,\n        session_params,\n        loop,\n        background_relogin,\n        background_relogin_interval,\n        background_refresh_token,\n        background_refresh_token_interval,\n    )\n\n    await self._handle_login()\n    return self\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.create_order","title":"<code>create_order(market, amount1, price, mode, type, identifier=None, price_limit=None, price_stop=None, price_limit_oco=None, amount2=None, **kwargs)</code>  <code>async</code>","text":"<p>Create order.</p> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>int</code> <p>Market.</p> required <code>amount1</code> <code>float</code> <p>Amount1.</p> required <code>price</code> <code>float</code> <p>Price.</p> required <code>mode</code> <code>OrderModes</code> <p>Mode.</p> required <code>type</code> <code>OrderTypes</code> <p>Type.</p> required <code>identifier</code> <code>str</code> <p>Identifier.</p> <code>None</code> <code>price_limit</code> <code>float</code> <p>Price limit.</p> <code>None</code> <code>price_stop</code> <code>float</code> <p>Price stop.</p> <code>None</code> <code>price_limit_oco</code> <code>float</code> <p>Price limit oco.</p> <code>None</code> <code>amount2</code> <code>float</code> <p>Amount2.</p> <code>None</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def create_order(  # type: ignore[no-untyped-def, override]\n    self,\n    market: int,\n    amount1: float,\n    price: float,\n    mode: t.OrderModes,\n    type: t.OrderTypes,  # pylint: disable=redefined-builtin\n    identifier: t.OptionalStr = None,\n    price_limit: t.OptionalFloat = None,\n    price_stop: t.OptionalFloat = None,\n    price_limit_oco: t.OptionalFloat = None,\n    amount2: t.OptionalFloat = None,\n    **kwargs,\n) -&gt; t.CreateOrderResponse:\n    \"\"\"\n    Create order.\n\n    Args:\n        market (int): Market.\n        amount1 (float): Amount1.\n        price (float): Price.\n        mode (OrderModes): Mode.\n        type (OrderTypes): Type.\n        identifier (str): Identifier.\n        price_limit (float): Price limit.\n        price_stop (float): Price stop.\n        price_limit_oco (float): Price limit oco.\n        amount2 (float): Amount2.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#34b353d77b)\n    \"\"\"\n\n    kwargs[\"json\"] = {k: v for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n    return await self._post(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.get_currencies_info","title":"<code>get_currencies_info(page=1, **kwargs)</code>  <code>async</code>","text":"<p>Get currencies info.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Notes <p>Rate limit: 10000/day or 200/minute if you are authenticated.</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_currencies_info(  # type: ignore[no-untyped-def, override]\n    self, page: int = 1, **kwargs\n) -&gt; t.DictStrAny:\n    \"\"\"\n    Get currencies info.\n\n    Args:\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#7e59da3d0d)\n\n    Notes:\n        Rate limit: 10000/day or 200/minute if you are authenticated.\n    \"\"\"\n\n    return await self._get(self.CURRENCIES_LIST_URL.format(page), **kwargs)\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.get_markets_info","title":"<code>get_markets_info(page=1, **kwargs)</code>  <code>async</code>","text":"<p>Get markets info.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Notes <p>Rate limit: 10000/day or 200/minute if you are authenticated.</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_markets_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def, override]\n    \"\"\"\n    Get markets info.\n\n    Args:\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#334792bb2b)\n\n    Notes:\n        Rate limit: 10000/day or 200/minute if you are authenticated.\n    \"\"\"\n\n    return await self._get(self.MARKETS_LIST_URL.format(page), **kwargs)\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.get_orderbook","title":"<code>get_orderbook(market_id, type, **kwargs)</code>  <code>async</code>","text":"<p>Get orderbook.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> required <code>type</code> <code>OrderTypes</code> <p>Type.</p> required <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_orderbook(  # type: ignore[no-untyped-def, override]\n    self,\n    market_id: int,\n    type: t.OrderTypes,\n    **kwargs,  # pylint: disable=redefined-builtin\n) -&gt; t.OrderbookResponse:\n    \"\"\"\n    Get orderbook.\n\n    Args:\n        market_id (int): Market ID.\n        type (OrderTypes): Type.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#ec7180fc0e)\n    \"\"\"\n    return await self._get(  # type: ignore[return-value]\n        self.ORDERBOOK_URL.format(market_id, str(type)), version=self.PUBLIC_API_VERSION_2, **kwargs\n    )\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.get_recent_trades","title":"<code>get_recent_trades(market_id, **kwargs)</code>  <code>async</code>","text":"<p>Get recent trades.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> required <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_recent_trades(  # type: ignore[no-untyped-def, override]\n    self, market_id: int, **kwargs\n) -&gt; t.TradeResponse:\n    \"\"\"\n    Get recent trades.\n\n    Args:\n        market_id (int): Market ID.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#1dd63530b5)\n    \"\"\"\n\n    return await self._get(self.RECENT_TRADES_URL.format(market_id), **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.get_user_info","title":"<code>get_user_info(**kwargs)</code>  <code>async</code>","text":"<p>Get user info.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_user_info(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def, override]\n    \"\"\"\n    Get user info.\n\n    Args:\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#5b3c85d79e)\n    \"\"\"\n\n    return await self._get(self.USER_INFO_URL, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.get_user_orders","title":"<code>get_user_orders(market_id=None, type=None, state=None, mode=None, identifier=None, page=1, **kwargs)</code>  <code>async</code>","text":"<p>Get user orders.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> <code>None</code> <code>type</code> <code>OrderTypes</code> <p>Type.</p> <code>None</code> <code>state</code> <code>str</code> <p>State.</p> <code>None</code> <code>mode</code> <code>str</code> <p>Mode.</p> <code>None</code> <code>identifier</code> <code>str</code> <p>Identifier.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_user_orders(  # type: ignore[no-untyped-def, override]\n    self,\n    market_id: t.OptionalInt = None,\n    type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n    state: t.OptionalStr = None,\n    mode: t.OptionalStr = None,\n    identifier: t.OptionalStr = None,\n    page: int = 1,\n    **kwargs,\n) -&gt; t.OpenOrdersResponse:\n    \"\"\"\n    Get user orders.\n\n    Args:\n        market_id (int): Market ID.\n        type (OrderTypes): Type.\n        state (str): State.\n        mode (str): Mode.\n        identifier (str): Identifier.\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#8a7c2a2af5)\n    \"\"\"\n\n    kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n    return await self._get(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.get_user_trades","title":"<code>get_user_trades(market_id=None, type=None, page=1, **kwargs)</code>  <code>async</code>","text":"<p>Get user trades.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> <code>None</code> <code>type</code> <code>OrderTypes</code> <p>Type.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_user_trades(  # type: ignore[no-untyped-def, override]\n    self,\n    market_id: t.OptionalInt = None,\n    type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n    page: int = 1,\n    **kwargs,\n) -&gt; t.DictStrAny:\n    \"\"\"\n    Get user trades.\n\n    Args:\n        market_id (int): Market ID.\n        type (OrderTypes): Type.\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n    \"\"\"\n\n    kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n    return await self._get(self.USER_TRADES_URL, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.get_wallets","title":"<code>get_wallets(**kwargs)</code>  <code>async</code>","text":"<p>Get wallets.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Notes <p>Rate limit: 10000/day.</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def get_wallets(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def, override]\n    \"\"\"\n    Get wallets.\n\n    Args:\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#9b93495188)\n\n    Notes:\n        Rate limit: 10000/day.\n    \"\"\"\n\n    return await self._get(self.WALLETS_URL, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.login","title":"<code>login(**kwargs)</code>  <code>async</code>","text":"<p>Login and set (refresh_token/access_token).</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>LoginResponse</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def login(self, **kwargs) -&gt; t.LoginResponse:  # type: ignore[no-untyped-def, override]\n    \"\"\"\n    Login and set (refresh_token/access_token).\n\n    Args:\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (LoginResponse): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#02c24a5326)\n    \"\"\"\n\n    kwargs[\"json\"] = {\"api_key\": self.api_key, \"secret_key\": self.api_secret}\n    _: t.LoginResponse = await self._post(self.LOGIN_URL, **kwargs)  # type: ignore[assignment]\n\n    self.refresh_token = _[\"refresh\"]\n    self.access_token = _[\"access\"]\n\n    return _\n</code></pre>"},{"location":"reference/clients/async_client/#src.bitpin.clients.async_client.AsyncClient.refresh_access_token","title":"<code>refresh_access_token(refresh_token=None, **kwargs)</code>  <code>async</code>","text":"<p>Refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>None</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>RefreshTokenResponse</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/async_client.py</code> <pre><code>async def refresh_access_token(  # type: ignore[no-untyped-def, override]\n    self, refresh_token: t.OptionalStr = None, **kwargs\n) -&gt; t.RefreshTokenResponse:\n    \"\"\"\n    Refresh token.\n\n    Args:\n        refresh_token (str): Refresh token.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (RefreshTokenResponse): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#9b81094f74)\n    \"\"\"\n\n    kwargs[\"json\"] = {\"refresh\": refresh_token or self.refresh_token}\n    _: t.RefreshTokenResponse = await self._post(self.REFRESH_TOKEN_URL, **kwargs)  # type: ignore[assignment]\n\n    self.access_token = _[\"access\"]\n\n    return _\n</code></pre>"},{"location":"reference/clients/client/","title":"client","text":""},{"location":"reference/clients/client/#src.bitpin.clients.client--bitpin-client","title":"Bitpin Client.","text":""},{"location":"reference/clients/client/#src.bitpin.clients.client.Client","title":"<code>Client</code>","text":"<p>             Bases: <code>CoreClient</code></p> <p>Client.</p> <p>Methods:</p> Name Description <code>login</code> <p>Login and set (refresh_token/access_token)</p> <code>refresh_access_token</code> <p>Refresh token.</p> <code>get_user_info</code> <p>Get user info.</p> <code>get_currencies_info</code> <p>Get currencies info.</p> <code>get_markets_info</code> <p>Get markets info.</p> <code>get_wallets</code> <p>Get wallets.</p> <code>get_orderbook</code> <p>Get orderbook.</p> <code>get_recent_trades</code> <p>Get recent trades.</p> <code>get_user_orders</code> <p>Get use orders.</p> <code>create_order</code> <p>Create order.</p> <code>cancel_order</code> <p>Cancel order.</p> <code>get_user_trades</code> <p>Get user trades.</p> <code>close_connection</code> <p>Close connection.</p> <p>Attributes:</p> Name Type Description <code>session</code> <code>ClientSession</code> <p>Session.</p> <code>api_key</code> <code>str</code> <p>API key.</p> <code>api_secret</code> <code>str</code> <p>API secret.</p> <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>access_token</code> <code>str</code> <p>Access token.</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>class Client(CoreClient):\n    \"\"\"\n    Client.\n\n    Methods:\n        login: Login and set (refresh_token/access_token)\n        refresh_access_token: Refresh token.\n        get_user_info: Get user info.\n        get_currencies_info: Get currencies info.\n        get_markets_info: Get markets info.\n        get_wallets: Get wallets.\n        get_orderbook: Get orderbook.\n        get_recent_trades: Get recent trades.\n        get_user_orders: Get use orders.\n        create_order: Create order.\n        cancel_order: Cancel order.\n        get_user_trades: Get user trades.\n        close_connection: Close connection.\n\n    Attributes:\n        session (aiohttp.ClientSession): Session.\n        api_key (str): API key.\n        api_secret (str): API secret.\n        refresh_token (str): Refresh token.\n        access_token (str): Access token.\n    \"\"\"\n\n    def __init__(  # type: ignore[no-untyped-def]\n        self,\n        api_key: t.OptionalStr = None,\n        api_secret: t.OptionalStr = None,\n        access_token: t.OptionalStr = None,\n        refresh_token: t.OptionalStr = None,\n        requests_params: t.OptionalDictStrAny = None,\n        background_relogin: bool = False,\n        background_relogin_interval: int = 60 * 60 * 24 * 6,\n        background_refresh_token: bool = False,\n        background_refresh_token_interval: int = 60 * 13,\n    ):\n        \"\"\"\n        Constructor.\n\n        Args:\n            api_key (str): API key.\n            api_secret (str): API secret.\n            access_token (str): Access token.\n            refresh_token (str): Refresh token.\n            requests_params (dict): Requests params.\n            background_relogin (bool): Background refresh.\n            background_relogin_interval (int): Background refresh interval.\n            background_refresh_token (bool): Background refresh token.\n            background_refresh_token_interval (int): Background refresh token interval.\n\n        Notes:\n            If `api_key` and `api_secret` are not provided, they will be read from the environment variables\n            `BITPIN_API_KEY` and `BITPIN_API_SECRET` respectively.\n\n            If `access_token` and `refresh_token` are not provided, they will be read from the environment variables\n            `BITPIN_ACCESS_TOKEN` and `BITPIN_REFRESH_TOKEN` respectively.\n\n            If `requests_params` are provided, they will be used as default for every request.\n\n            If `requests_params` are provided in `kwargs`, they will override existing `requests_params`.\n\n            If `background_relogin` is enabled, access token will be refreshed in background every\n            `background_relogin_interval` seconds.\n\n            If `background_refresh_token` is enabled, refresh token will be refreshed in background every\n            `background_refresh_token_interval` seconds.\n        \"\"\"\n\n        super().__init__(\n            api_key,\n            api_secret,\n            access_token,\n            refresh_token,\n            requests_params,\n            background_relogin,\n            background_relogin_interval,\n            background_refresh_token,\n            background_refresh_token_interval,\n        )\n\n        self._handle_login()\n\n    def _init_session(self) -&gt; requests.Session:\n        \"\"\"\n        Initialize session.\n\n        Returns:\n            session (aiohttp.ClientSession): Session.\n\n        \"\"\"\n\n        session = requests.Session()\n        session.headers[\"Content-Type\"] = \"application/json\"\n        session.headers[\"Accept\"] = \"application/json\"\n        return session\n\n    def _get(  # type: ignore[no-untyped-def]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Make a GET request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        return self._request_api(enums.RequestMethod.GET, path, signed, version, **kwargs)\n\n    def _post(  # type: ignore[no-untyped-def]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Make a POST request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        return self._request_api(enums.RequestMethod.POST, path, signed, version, **kwargs)\n\n    def _delete(  # type: ignore[no-untyped-def]\n        self,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Make a DELETE request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        return self._request_api(enums.RequestMethod.DELETE, path, signed, version, **kwargs)\n\n    def _request_api(  # type: ignore[no-untyped-def]\n        self,\n        method: t.RequestMethods,\n        path: str,\n        signed: bool = False,\n        version: str = CoreClient.PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Request API.\n\n        Args:\n            method (RequestMethod): Method.\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        uri = self._create_api_uri(path, version)\n        return self._request(method, uri, signed, **kwargs)\n\n    def _request(  # type: ignore[no-untyped-def]\n        self, method: t.RequestMethods, uri: str, signed: bool, **kwargs\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Request.\n\n        Args:\n            method (RequestMethod): Method.\n            uri (str): URI.\n            signed (bool): Signed.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        kwargs = self._get_request_kwargs(method, signed, **kwargs)\n\n        with getattr(self.session, method)(uri, **kwargs) as response:\n            self.response = response  # pylint: disable=attribute-defined-outside-init\n            return self._handle_response(response)\n\n    @staticmethod\n    def _handle_response(response: requests.Response) -&gt; t.DictStrAny:  # type: ignore[override]\n        \"\"\"\n        Handle response.\n\n        Args:\n            response (aiohttp.ClientResponse): Response.\n\n        Returns:\n            dict: Response.\n\n        Raises:\n            APIException: API Exception.\n            RequestException: Request Exception.\n        \"\"\"\n\n        if not str(response.status_code).startswith(\"2\"):\n            if response.request.method.lower() == enums.RequestMethod.DELETE:  # type: ignore[union-attr]\n                return {\"status\": \"success\", \"id\": response.request.path_url.split(\"/\")[-2]}\n            raise APIException(response, response.status_code, response.text)\n        try:\n            return response.json()  # type: ignore[no-any-return]\n        except ValueError as exc:\n            raise RequestException(f\"Invalid Response: {response.text}\") from exc\n\n    def _handle_login(self) -&gt; None:\n        \"\"\"Handle login.\"\"\"\n\n        if self.api_key and self.api_secret:\n            self.login()\n\n        if self._background_relogin:\n            Thread(target=self._background_relogin_task, daemon=True).start()\n\n        if self._background_refresh_token:\n            Thread(target=self._background_refresh_token_task, daemon=True).start()\n\n    def _background_relogin_task(self) -&gt; None:\n        \"\"\"Background relogin task.\"\"\"\n\n        while True:\n            try:\n                self.login()\n                time.sleep(self._background_relogin_interval)\n            except Exception:  # pylint: disable=broad-except\n                continue\n\n    def _background_refresh_token_task(self) -&gt; None:\n        \"\"\"Background refresh token task.\"\"\"\n\n        while True:\n            try:\n                self.refresh_access_token()\n                time.sleep(self._background_refresh_token_interval)\n            except Exception:  # pylint: disable=broad-except\n                continue\n\n    def login(self, **kwargs) -&gt; t.LoginResponse:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Login and set (refresh_token/access_token).\n\n        Args:\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (LoginResponse): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#02c24a5326)\n        \"\"\"\n\n        kwargs[\"json\"] = {\"api_key\": self.api_key, \"secret_key\": self.api_secret}\n        _: t.LoginResponse = self._post(self.LOGIN_URL, **kwargs)  # type: ignore[assignment]\n\n        self.refresh_token = _[\"refresh\"]\n        self.access_token = _[\"access\"]\n\n        return _\n\n    def refresh_access_token(  # type: ignore[no-untyped-def]\n        self, refresh_token: t.OptionalStr = None, **kwargs\n    ) -&gt; t.RefreshTokenResponse:\n        \"\"\"\n        Refresh token.\n\n        Args:\n            refresh_token (str): Refresh token.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (RefreshTokenResponse): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#9b81094f74)\n        \"\"\"\n\n        kwargs[\"json\"] = {\"refresh\": refresh_token or self.refresh_token}\n        _: t.RefreshTokenResponse = self._post(self.REFRESH_TOKEN_URL, **kwargs)  # type: ignore[assignment]\n\n        self.access_token = _[\"access\"]\n\n        return _\n\n    def get_user_info(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get user info.\n\n        Args:\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#5b3c85d79e)\n        \"\"\"\n\n        return self._get(self.USER_INFO_URL, signed=True, **kwargs)\n\n    def get_currencies_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get currencies info.\n\n        Args:\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#7e59da3d0d)\n\n        Notes:\n            Rate limit: 10000/day or 200/minute if you are authenticated.\n        \"\"\"\n\n        return self._get(self.CURRENCIES_LIST_URL.format(page), **kwargs)\n\n    def get_markets_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get markets info.\n\n        Args:\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#334792bb2b)\n\n        Notes:\n            Rate limit: 10000/day or 200/minute if you are authenticated.\n        \"\"\"\n\n        return self._get(self.MARKETS_LIST_URL.format(page), **kwargs)\n\n    def get_wallets(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get wallets.\n\n        Args:\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#9b93495188)\n\n        Notes:\n            Rate limit: 10000/day.\n        \"\"\"\n\n        return self._get(self.WALLETS_URL, signed=True, **kwargs)\n\n    def get_orderbook(  # type: ignore[no-untyped-def]\n        self,\n        market_id: int,\n        type: t.OrderTypes,\n        **kwargs,  # pylint: disable=redefined-builtin\n    ) -&gt; t.OrderbookResponse:\n        \"\"\"\n        Get orderbook.\n\n        Args:\n            market_id (int): Market ID.\n            type (OrderTypes): Type.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#ec7180fc0e)\n        \"\"\"\n\n        return self._get(self.ORDERBOOK_URL.format(market_id, str(type)), **kwargs)  # type: ignore[return-value]\n\n    def get_recent_trades(self, market_id: int, **kwargs) -&gt; t.TradeResponse:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get recent trades.\n\n        Args:\n            market_id (int): Market ID.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#1dd63530b5)\n        \"\"\"\n\n        return self._get(self.RECENT_TRADES_URL.format(market_id), **kwargs)  # type: ignore[return-value]\n\n    def get_user_orders(  # type: ignore[no-untyped-def]\n        self,\n        market_id: t.OptionalInt = None,\n        type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n        state: t.OptionalStr = None,\n        mode: t.OptionalStr = None,\n        identifier: t.OptionalStr = None,\n        page: int = 1,\n        **kwargs,\n    ) -&gt; t.OpenOrdersResponse:\n        \"\"\"\n        Get user Orders.\n\n        Args:\n            market_id (int): Market ID.\n            type (OrderTypes): Type.\n            state (str): State.\n            mode (str): Mode.\n            identifier (str): Identifier.\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#8a7c2a2af5)\n        \"\"\"\n\n        kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n        return self._get(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n\n    def create_order(  # type: ignore[no-untyped-def]\n        self,\n        market: int,\n        amount1: float,\n        price: float,\n        mode: t.OrderModes,\n        type: t.OrderTypes,  # pylint: disable=redefined-builtin\n        identifier: t.OptionalStr = None,\n        price_limit: t.OptionalFloat = None,\n        price_stop: t.OptionalFloat = None,\n        price_limit_oco: t.OptionalFloat = None,\n        amount2: t.OptionalFloat = None,\n        **kwargs,\n    ) -&gt; t.CreateOrderResponse:\n        \"\"\"\n        Create order.\n\n        Args:\n            market (int): Market.\n            amount1 (float): Amount1.\n            price (float): Price.\n            mode (OrderModes): Mode.\n            type (OrderTypes): Type.\n            identifier (str): Identifier.\n            price_limit (float): Price limit.\n            price_stop (float): Price stop.\n            price_limit_oco (float): Price limit oco.\n            amount2 (float): Amount2.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#34b353d77b)\n        \"\"\"\n\n        kwargs[\"json\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n        return self._post(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n\n    def cancel_order(self, order_id: str, **kwargs) -&gt; t.CancelOrderResponse:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Cancel order.\n\n        Args:\n            order_id (str): Order ID.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n        \"\"\"\n\n        return self._delete(self.ORDERS_URL + f\"{order_id}/\", signed=True, **kwargs)  # type: ignore[return-value]\n\n    def get_user_trades(  # type: ignore[no-untyped-def]\n        self,\n        market_id: t.OptionalInt = None,\n        type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n        page: int = 1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Get user trades.\n\n        Args:\n            market_id (int): Market ID.\n            type (OrderTypes): Type.\n            page (int): Page.\n            **kwargs: Kwargs.\n\n        Returns:\n            Response (dict): Response.\n\n        References:\n            [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n        \"\"\"\n\n        kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n        return self._get(self.USER_TRADES_URL, signed=True, **kwargs)\n\n    def close_connection(self) -&gt; None:\n        \"\"\"Close connection.\"\"\"\n\n        self.session.close()\n</code></pre>"},{"location":"reference/clients/client/#src.bitpin.clients.client.Client.__init__","title":"<code>__init__(api_key=None, api_secret=None, access_token=None, refresh_token=None, requests_params=None, background_relogin=False, background_relogin_interval=60 * 60 * 24 * 6, background_refresh_token=False, background_refresh_token_interval=60 * 13)</code>","text":"<p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>API key.</p> <code>None</code> <code>api_secret</code> <code>str</code> <p>API secret.</p> <code>None</code> <code>access_token</code> <code>str</code> <p>Access token.</p> <code>None</code> <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>None</code> <code>requests_params</code> <code>dict</code> <p>Requests params.</p> <code>None</code> <code>background_relogin</code> <code>bool</code> <p>Background refresh.</p> <code>False</code> <code>background_relogin_interval</code> <code>int</code> <p>Background refresh interval.</p> <code>60 * 60 * 24 * 6</code> <code>background_refresh_token</code> <code>bool</code> <p>Background refresh token.</p> <code>False</code> <code>background_refresh_token_interval</code> <code>int</code> <p>Background refresh token interval.</p> <code>60 * 13</code> Notes <p>If <code>api_key</code> and <code>api_secret</code> are not provided, they will be read from the environment variables <code>BITPIN_API_KEY</code> and <code>BITPIN_API_SECRET</code> respectively.</p> <p>If <code>access_token</code> and <code>refresh_token</code> are not provided, they will be read from the environment variables <code>BITPIN_ACCESS_TOKEN</code> and <code>BITPIN_REFRESH_TOKEN</code> respectively.</p> <p>If <code>requests_params</code> are provided, they will be used as default for every request.</p> <p>If <code>requests_params</code> are provided in <code>kwargs</code>, they will override existing <code>requests_params</code>.</p> <p>If <code>background_relogin</code> is enabled, access token will be refreshed in background every <code>background_relogin_interval</code> seconds.</p> <p>If <code>background_refresh_token</code> is enabled, refresh token will be refreshed in background every <code>background_refresh_token_interval</code> seconds.</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def __init__(  # type: ignore[no-untyped-def]\n    self,\n    api_key: t.OptionalStr = None,\n    api_secret: t.OptionalStr = None,\n    access_token: t.OptionalStr = None,\n    refresh_token: t.OptionalStr = None,\n    requests_params: t.OptionalDictStrAny = None,\n    background_relogin: bool = False,\n    background_relogin_interval: int = 60 * 60 * 24 * 6,\n    background_refresh_token: bool = False,\n    background_refresh_token_interval: int = 60 * 13,\n):\n    \"\"\"\n    Constructor.\n\n    Args:\n        api_key (str): API key.\n        api_secret (str): API secret.\n        access_token (str): Access token.\n        refresh_token (str): Refresh token.\n        requests_params (dict): Requests params.\n        background_relogin (bool): Background refresh.\n        background_relogin_interval (int): Background refresh interval.\n        background_refresh_token (bool): Background refresh token.\n        background_refresh_token_interval (int): Background refresh token interval.\n\n    Notes:\n        If `api_key` and `api_secret` are not provided, they will be read from the environment variables\n        `BITPIN_API_KEY` and `BITPIN_API_SECRET` respectively.\n\n        If `access_token` and `refresh_token` are not provided, they will be read from the environment variables\n        `BITPIN_ACCESS_TOKEN` and `BITPIN_REFRESH_TOKEN` respectively.\n\n        If `requests_params` are provided, they will be used as default for every request.\n\n        If `requests_params` are provided in `kwargs`, they will override existing `requests_params`.\n\n        If `background_relogin` is enabled, access token will be refreshed in background every\n        `background_relogin_interval` seconds.\n\n        If `background_refresh_token` is enabled, refresh token will be refreshed in background every\n        `background_refresh_token_interval` seconds.\n    \"\"\"\n\n    super().__init__(\n        api_key,\n        api_secret,\n        access_token,\n        refresh_token,\n        requests_params,\n        background_relogin,\n        background_relogin_interval,\n        background_refresh_token,\n        background_refresh_token_interval,\n    )\n\n    self._handle_login()\n</code></pre>"},{"location":"reference/clients/client/#src.bitpin.clients.client.Client.cancel_order","title":"<code>cancel_order(order_id, **kwargs)</code>","text":"<p>Cancel order.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>str</code> <p>Order ID.</p> required <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def cancel_order(self, order_id: str, **kwargs) -&gt; t.CancelOrderResponse:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Cancel order.\n\n    Args:\n        order_id (str): Order ID.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n    \"\"\"\n\n    return self._delete(self.ORDERS_URL + f\"{order_id}/\", signed=True, **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/client/#src.bitpin.clients.client.Client.close_connection","title":"<code>close_connection()</code>","text":"<p>Close connection.</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def close_connection(self) -&gt; None:\n    \"\"\"Close connection.\"\"\"\n\n    self.session.close()\n</code></pre>"},{"location":"reference/clients/client/#src.bitpin.clients.client.Client.create_order","title":"<code>create_order(market, amount1, price, mode, type, identifier=None, price_limit=None, price_stop=None, price_limit_oco=None, amount2=None, **kwargs)</code>","text":"<p>Create order.</p> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>int</code> <p>Market.</p> required <code>amount1</code> <code>float</code> <p>Amount1.</p> required <code>price</code> <code>float</code> <p>Price.</p> required <code>mode</code> <code>OrderModes</code> <p>Mode.</p> required <code>type</code> <code>OrderTypes</code> <p>Type.</p> required <code>identifier</code> <code>str</code> <p>Identifier.</p> <code>None</code> <code>price_limit</code> <code>float</code> <p>Price limit.</p> <code>None</code> <code>price_stop</code> <code>float</code> <p>Price stop.</p> <code>None</code> <code>price_limit_oco</code> <code>float</code> <p>Price limit oco.</p> <code>None</code> <code>amount2</code> <code>float</code> <p>Amount2.</p> <code>None</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def create_order(  # type: ignore[no-untyped-def]\n    self,\n    market: int,\n    amount1: float,\n    price: float,\n    mode: t.OrderModes,\n    type: t.OrderTypes,  # pylint: disable=redefined-builtin\n    identifier: t.OptionalStr = None,\n    price_limit: t.OptionalFloat = None,\n    price_stop: t.OptionalFloat = None,\n    price_limit_oco: t.OptionalFloat = None,\n    amount2: t.OptionalFloat = None,\n    **kwargs,\n) -&gt; t.CreateOrderResponse:\n    \"\"\"\n    Create order.\n\n    Args:\n        market (int): Market.\n        amount1 (float): Amount1.\n        price (float): Price.\n        mode (OrderModes): Mode.\n        type (OrderTypes): Type.\n        identifier (str): Identifier.\n        price_limit (float): Price limit.\n        price_stop (float): Price stop.\n        price_limit_oco (float): Price limit oco.\n        amount2 (float): Amount2.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#34b353d77b)\n    \"\"\"\n\n    kwargs[\"json\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n    return self._post(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/client/#src.bitpin.clients.client.Client.get_currencies_info","title":"<code>get_currencies_info(page=1, **kwargs)</code>","text":"<p>Get currencies info.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Notes <p>Rate limit: 10000/day or 200/minute if you are authenticated.</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_currencies_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get currencies info.\n\n    Args:\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#7e59da3d0d)\n\n    Notes:\n        Rate limit: 10000/day or 200/minute if you are authenticated.\n    \"\"\"\n\n    return self._get(self.CURRENCIES_LIST_URL.format(page), **kwargs)\n</code></pre>"},{"location":"reference/clients/client/#src.bitpin.clients.client.Client.get_markets_info","title":"<code>get_markets_info(page=1, **kwargs)</code>","text":"<p>Get markets info.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Notes <p>Rate limit: 10000/day or 200/minute if you are authenticated.</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_markets_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get markets info.\n\n    Args:\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#334792bb2b)\n\n    Notes:\n        Rate limit: 10000/day or 200/minute if you are authenticated.\n    \"\"\"\n\n    return self._get(self.MARKETS_LIST_URL.format(page), **kwargs)\n</code></pre>"},{"location":"reference/clients/client/#src.bitpin.clients.client.Client.get_orderbook","title":"<code>get_orderbook(market_id, type, **kwargs)</code>","text":"<p>Get orderbook.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> required <code>type</code> <code>OrderTypes</code> <p>Type.</p> required <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_orderbook(  # type: ignore[no-untyped-def]\n    self,\n    market_id: int,\n    type: t.OrderTypes,\n    **kwargs,  # pylint: disable=redefined-builtin\n) -&gt; t.OrderbookResponse:\n    \"\"\"\n    Get orderbook.\n\n    Args:\n        market_id (int): Market ID.\n        type (OrderTypes): Type.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#ec7180fc0e)\n    \"\"\"\n\n    return self._get(self.ORDERBOOK_URL.format(market_id, str(type)), **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/client/#src.bitpin.clients.client.Client.get_recent_trades","title":"<code>get_recent_trades(market_id, **kwargs)</code>","text":"<p>Get recent trades.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> required <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_recent_trades(self, market_id: int, **kwargs) -&gt; t.TradeResponse:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get recent trades.\n\n    Args:\n        market_id (int): Market ID.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#1dd63530b5)\n    \"\"\"\n\n    return self._get(self.RECENT_TRADES_URL.format(market_id), **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/client/#src.bitpin.clients.client.Client.get_user_info","title":"<code>get_user_info(**kwargs)</code>","text":"<p>Get user info.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_user_info(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get user info.\n\n    Args:\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#5b3c85d79e)\n    \"\"\"\n\n    return self._get(self.USER_INFO_URL, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/client/#src.bitpin.clients.client.Client.get_user_orders","title":"<code>get_user_orders(market_id=None, type=None, state=None, mode=None, identifier=None, page=1, **kwargs)</code>","text":"<p>Get user Orders.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> <code>None</code> <code>type</code> <code>OrderTypes</code> <p>Type.</p> <code>None</code> <code>state</code> <code>str</code> <p>State.</p> <code>None</code> <code>mode</code> <code>str</code> <p>Mode.</p> <code>None</code> <code>identifier</code> <code>str</code> <p>Identifier.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_user_orders(  # type: ignore[no-untyped-def]\n    self,\n    market_id: t.OptionalInt = None,\n    type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n    state: t.OptionalStr = None,\n    mode: t.OptionalStr = None,\n    identifier: t.OptionalStr = None,\n    page: int = 1,\n    **kwargs,\n) -&gt; t.OpenOrdersResponse:\n    \"\"\"\n    Get user Orders.\n\n    Args:\n        market_id (int): Market ID.\n        type (OrderTypes): Type.\n        state (str): State.\n        mode (str): Mode.\n        identifier (str): Identifier.\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#8a7c2a2af5)\n    \"\"\"\n\n    kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n    return self._get(self.ORDERS_URL, signed=True, **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/clients/client/#src.bitpin.clients.client.Client.get_user_trades","title":"<code>get_user_trades(market_id=None, type=None, page=1, **kwargs)</code>","text":"<p>Get user trades.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> <code>None</code> <code>type</code> <code>OrderTypes</code> <p>Type.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_user_trades(  # type: ignore[no-untyped-def]\n    self,\n    market_id: t.OptionalInt = None,\n    type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n    page: int = 1,\n    **kwargs,\n) -&gt; t.DictStrAny:\n    \"\"\"\n    Get user trades.\n\n    Args:\n        market_id (int): Market ID.\n        type (OrderTypes): Type.\n        page (int): Page.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#3fe8d57657)\n    \"\"\"\n\n    kwargs[\"params\"] = {k: str(v) for k, v in locals().items() if v is not None and k not in (\"self\", \"kwargs\")}\n    return self._get(self.USER_TRADES_URL, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/client/#src.bitpin.clients.client.Client.get_wallets","title":"<code>get_wallets(**kwargs)</code>","text":"<p>Get wallets.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Response.</p> References <p>API Docs</p> Notes <p>Rate limit: 10000/day.</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def get_wallets(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get wallets.\n\n    Args:\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (dict): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#9b93495188)\n\n    Notes:\n        Rate limit: 10000/day.\n    \"\"\"\n\n    return self._get(self.WALLETS_URL, signed=True, **kwargs)\n</code></pre>"},{"location":"reference/clients/client/#src.bitpin.clients.client.Client.login","title":"<code>login(**kwargs)</code>","text":"<p>Login and set (refresh_token/access_token).</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>LoginResponse</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def login(self, **kwargs) -&gt; t.LoginResponse:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Login and set (refresh_token/access_token).\n\n    Args:\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (LoginResponse): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#02c24a5326)\n    \"\"\"\n\n    kwargs[\"json\"] = {\"api_key\": self.api_key, \"secret_key\": self.api_secret}\n    _: t.LoginResponse = self._post(self.LOGIN_URL, **kwargs)  # type: ignore[assignment]\n\n    self.refresh_token = _[\"refresh\"]\n    self.access_token = _[\"access\"]\n\n    return _\n</code></pre>"},{"location":"reference/clients/client/#src.bitpin.clients.client.Client.refresh_access_token","title":"<code>refresh_access_token(refresh_token=None, **kwargs)</code>","text":"<p>Refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>None</code> <code>**kwargs</code> <p>Kwargs.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>RefreshTokenResponse</code> <p>Response.</p> References <p>API Docs</p> Source code in <code>src/bitpin/clients/client.py</code> <pre><code>def refresh_access_token(  # type: ignore[no-untyped-def]\n    self, refresh_token: t.OptionalStr = None, **kwargs\n) -&gt; t.RefreshTokenResponse:\n    \"\"\"\n    Refresh token.\n\n    Args:\n        refresh_token (str): Refresh token.\n        **kwargs: Kwargs.\n\n    Returns:\n        Response (RefreshTokenResponse): Response.\n\n    References:\n        [API Docs](https://docs.bitpin.ir/#9b81094f74)\n    \"\"\"\n\n    kwargs[\"json\"] = {\"refresh\": refresh_token or self.refresh_token}\n    _: t.RefreshTokenResponse = self._post(self.REFRESH_TOKEN_URL, **kwargs)  # type: ignore[assignment]\n\n    self.access_token = _[\"access\"]\n\n    return _\n</code></pre>"},{"location":"reference/clients/core/","title":"core","text":""},{"location":"reference/clients/core/#src.bitpin.clients.core--core-client","title":"Core Client.","text":""},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient","title":"<code>CoreClient</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Core Client.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>class CoreClient(ABC):  # pylint: disable=too-many-instance-attributes\n    \"\"\"Core Client.\"\"\"\n\n    API_URL = \"https://api.bitpin.ir\"\n\n    PUBLIC_API_VERSION_1 = \"v1\"\n    PUBLIC_API_VERSION_2 = \"v2\"\n\n    REQUEST_TIMEOUT: float = 10\n\n    LOGIN_URL = \"usr/api/login/\"\n    REFRESH_TOKEN_URL = \"usr/refresh_token/\"\n    USER_INFO_URL = \"usr/info/\"\n    CURRENCIES_LIST_URL = \"mkt/currencies/?page={}\"\n    MARKETS_LIST_URL = \"mkt/markets/?page={}\"\n    WALLETS_URL = \"wlt/wallets/\"\n    ORDERBOOK_URL = \"mth/actives/{}/?type={}\"\n    RECENT_TRADES_URL = \"mth/matches/{}/\"\n    ORDERS_URL = \"odr/orders/\"\n    USER_TRADES_URL = \"odr/matches/?type={}\"\n\n    def __init__(  # type: ignore[no-untyped-def]\n        self,\n        api_key: t.OptionalStr = None,\n        api_secret: t.OptionalStr = None,\n        access_token: t.OptionalStr = None,\n        refresh_token: t.OptionalStr = None,\n        requests_params: t.OptionalDictStrAny = None,\n        background_relogin: bool = False,\n        background_relogin_interval: int = 60 * 60 * 24 * 6,\n        background_refresh_token: bool = False,\n        background_refresh_token_interval: int = 60 * 13,\n    ):\n        \"\"\"\n        Constructor.\n\n        Args:\n            api_key (str): API key.\n            api_secret (str): API secret.\n            access_token (str): Access token.\n            refresh_token (str): Refresh token.\n            requests_params (dict): Requests params.\n            background_relogin (bool): Background refresh.\n            background_relogin_interval (int): Background refresh interval.\n            background_refresh_token (bool): Background refresh token.\n            background_refresh_token_interval (int): Background refresh token interval.\n\n        Notes:\n            If `api_key` and `api_secret` are not provided, they will be read from the environment variables\n            `BITPIN_API_KEY` and `BITPIN_API_SECRET` respectively.\n\n            If `access_token` and `refresh_token` are not provided, they will be read from the environment variables\n            `BITPIN_ACCESS_TOKEN` and `BITPIN_REFRESH_TOKEN` respectively.\n\n            If `requests_params` are provided, they will be used as default for every request.\n\n            If `requests_params` are provided in method's `kwargs`, they will override existing `requests_params`.\n\n            If `background_relogin` is enabled, access token will be refreshed in background every\n            `background_relogin_interval` seconds.\n\n            If `background_refresh_token` is enabled, refresh token will be refreshed in background every\n            `background_refresh_token_interval` seconds.\n        \"\"\"\n\n        self.api_key = api_key or os.environ.get(\"BITPIN_API_KEY\")\n        self.api_secret = api_secret or os.environ.get(\"BITPIN_API_SECRET\")\n        self.access_token: t.OptionalStr = access_token or os.environ.get(\"BITPIN_ACCESS_TOKEN\")\n        self.refresh_token: t.OptionalStr = refresh_token or os.environ.get(\"BITPIN_REFRESH_TOKEN\")\n\n        self._background_relogin = background_relogin\n        self._background_relogin_interval = background_relogin_interval\n        self._background_refresh_token = background_refresh_token\n        self._background_refresh_token_interval = background_refresh_token_interval\n\n        self._requests_params = requests_params\n        self.session = self._init_session()\n\n    def _get_request_kwargs(self, method: t.RequestMethods, signed: bool, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        kwargs[\"timeout\"] = self.REQUEST_TIMEOUT\n\n        if self._requests_params:\n            kwargs.update(self._requests_params)\n\n        data = kwargs.get(\"data\", None)\n        if data and isinstance(data, dict):\n            kwargs[\"data\"] = data\n\n            if \"requests_params\" in kwargs[\"data\"]:\n                kwargs.update(kwargs[\"data\"][\"requests_params\"])\n                del kwargs[\"data\"][\"requests_params\"]\n\n        if signed is True:\n            headers: t.DictStrAny = kwargs.get(\"headers\", {})\n            headers.update({\"Authorization\": f\"Bearer {self.access_token}\"})\n            kwargs[\"headers\"] = headers\n\n        if data and method == \"get\":\n            kwargs[\"params\"] = \"&amp;\".join(f\"{data[0]}={data[1]}\" for data in kwargs[\"data\"])\n            del kwargs[\"data\"]\n\n        return kwargs\n\n    @staticmethod\n    def _pick(response: t.DictStrAny, key: str, value: t.t.Any, result_key: str = \"results\") -&gt; t.DictStrAny:\n        for _ in response.get(result_key, []):\n            if _[key] == value:\n                response[result_key] = _\n                return response\n        raise ValueError(f\"{key} {value} not found in {response}\")\n\n    def _create_api_uri(self, path: str, version: str = PUBLIC_API_VERSION_1) -&gt; str:\n        return self.API_URL + \"/\" + str(version) + \"/\" + path\n\n    @abstractmethod\n    def _init_session(self) -&gt; t.HttpSession:\n        \"\"\"\n        Initialize session.\n\n        Returns:\n            session (t.Union[requests.Session, aiohttp.ClientSession]): Session.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def _get(self, path: str, signed: bool = False, version: str = PUBLIC_API_VERSION_1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Make a GET request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def _post(self, path: str, signed: bool = False, version: str = PUBLIC_API_VERSION_1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Make a POST request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def _delete(self, path: str, signed: bool = False, version: str = PUBLIC_API_VERSION_1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Make a DELETE request.\n\n        Args:\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def _request_api(  # type: ignore[no-untyped-def]\n        self,\n        method: t.RequestMethods,\n        path: str,\n        signed: bool = False,\n        version: str = PUBLIC_API_VERSION_1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Request API.\n\n        Args:\n            method (str): Method (GET, POST, PUT, DELETE).\n            path (str): Path.\n            signed (bool): Signed.\n            version (str): Version.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def _request(self, method: t.RequestMethods, uri: str, signed: bool, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Request.\n\n        Args:\n            method (str): Method (GET, POST, PUT, DELETE).\n            uri (str): URI.\n            signed (bool): Signed.\n            **kwargs: Kwargs.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @staticmethod\n    @abstractmethod\n    def _handle_response(response: t.HttpResponses) -&gt; t.DictStrAny:\n        \"\"\"\n        Handle response.\n\n        Args:\n            response (t.Union[requests.Response, aiohttp.ClientResponse]): Response.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def _handle_login(self) -&gt; None:\n        \"\"\"Handle login.\"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def _background_relogin_task(self) -&gt; None:\n        \"\"\"Background relogin task.\"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def _background_refresh_token_task(self) -&gt; None:\n        \"\"\"Background refresh token task.\"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def login(self, **kwargs) -&gt; t.LoginResponse:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Login.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def refresh_access_token(self, refresh_token: t.OptionalStr = None, **kwargs) -&gt; t.RefreshTokenResponse:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Refresh token.\n\n        Args:\n            refresh_token (str): Refresh token.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_user_info(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get user info.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_currencies_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get currencies info.\n\n        Args:\n            page (int): Page.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_markets_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get markets info.\n\n        Args:\n            page (int): Page.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_wallets(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get wallets.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_orderbook(self, market_id: int, type: t.OrderTypes, **kwargs) -&gt; t.OrderbookResponse:  # type: ignore[no-untyped-def]  # pylint: disable=redefined-builtin\n        \"\"\"\n        Get orderbook.\n\n        Args:\n            market_id (int): Market ID.\n            type (str): Type.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_recent_trades(self, market_id: int, **kwargs) -&gt; t.TradeResponse:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Get recent trades.\n\n        Args:\n            market_id (int): Market ID.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_user_orders(  # type: ignore[no-untyped-def]\n        self,\n        market_id: t.OptionalInt = None,\n        type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n        state: t.OptionalStr = None,\n        mode: t.OptionalStr = None,\n        identifier: t.OptionalStr = None,\n        page: int = 1,\n        **kwargs,\n    ) -&gt; t.OpenOrdersResponse:\n        \"\"\"\n        Get user orders.\n\n        Args:\n            market_id (int): Market ID.\n            type (str): Type.\n            state (str): State.\n            mode (str): Mode.\n            identifier (str): Identifier.\n            page (int): Page.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def create_order(  # type: ignore[no-untyped-def]\n        self,\n        market: int,\n        amount1: float,\n        price: float,\n        mode: t.OrderModes,\n        type: t.OrderTypes,  # pylint: disable=redefined-builtin\n        identifier: t.OptionalStr = None,\n        price_limit: t.OptionalFloat = None,\n        price_stop: t.OptionalFloat = None,\n        price_limit_oco: t.OptionalFloat = None,\n        amount2: t.OptionalFloat = None,\n        **kwargs,\n    ) -&gt; t.CreateOrderResponse:\n        \"\"\"\n        Create order.\n\n        Args:\n            market (int): Market.\n            amount1 (float): Amount1.\n            price (float): Price.\n            mode (str): Mode.\n            type (str): Type.\n            identifier (str): Identifier.\n            price_limit (float): Price limit.\n            price_stop (float): Price stop.\n            price_limit_oco (float): Price limit oco.\n            amount2 (float): Amount2.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def cancel_order(self, order_id: str, **kwargs) -&gt; t.CancelOrderResponse:  # type: ignore[no-untyped-def]\n        \"\"\"\n        Cancel order.\n\n        Args:\n            order_id (str): Order ID.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_user_trades(  # type: ignore[no-untyped-def]\n        self,\n        market_id: t.OptionalInt = None,\n        type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n        page: int = 1,\n        **kwargs,\n    ) -&gt; t.DictStrAny:\n        \"\"\"\n        Get user trades.\n\n        Args:\n            market_id (int): Market ID.\n            type (str): Type.\n            page (int): Page.\n\n        Returns:\n            dict: Response.\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abstractmethod\n    def close_connection(self) -&gt; None:\n        \"\"\"Close connection.\"\"\"\n\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient.__init__","title":"<code>__init__(api_key=None, api_secret=None, access_token=None, refresh_token=None, requests_params=None, background_relogin=False, background_relogin_interval=60 * 60 * 24 * 6, background_refresh_token=False, background_refresh_token_interval=60 * 13)</code>","text":"<p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>API key.</p> <code>None</code> <code>api_secret</code> <code>str</code> <p>API secret.</p> <code>None</code> <code>access_token</code> <code>str</code> <p>Access token.</p> <code>None</code> <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>None</code> <code>requests_params</code> <code>dict</code> <p>Requests params.</p> <code>None</code> <code>background_relogin</code> <code>bool</code> <p>Background refresh.</p> <code>False</code> <code>background_relogin_interval</code> <code>int</code> <p>Background refresh interval.</p> <code>60 * 60 * 24 * 6</code> <code>background_refresh_token</code> <code>bool</code> <p>Background refresh token.</p> <code>False</code> <code>background_refresh_token_interval</code> <code>int</code> <p>Background refresh token interval.</p> <code>60 * 13</code> Notes <p>If <code>api_key</code> and <code>api_secret</code> are not provided, they will be read from the environment variables <code>BITPIN_API_KEY</code> and <code>BITPIN_API_SECRET</code> respectively.</p> <p>If <code>access_token</code> and <code>refresh_token</code> are not provided, they will be read from the environment variables <code>BITPIN_ACCESS_TOKEN</code> and <code>BITPIN_REFRESH_TOKEN</code> respectively.</p> <p>If <code>requests_params</code> are provided, they will be used as default for every request.</p> <p>If <code>requests_params</code> are provided in method's <code>kwargs</code>, they will override existing <code>requests_params</code>.</p> <p>If <code>background_relogin</code> is enabled, access token will be refreshed in background every <code>background_relogin_interval</code> seconds.</p> <p>If <code>background_refresh_token</code> is enabled, refresh token will be refreshed in background every <code>background_refresh_token_interval</code> seconds.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>def __init__(  # type: ignore[no-untyped-def]\n    self,\n    api_key: t.OptionalStr = None,\n    api_secret: t.OptionalStr = None,\n    access_token: t.OptionalStr = None,\n    refresh_token: t.OptionalStr = None,\n    requests_params: t.OptionalDictStrAny = None,\n    background_relogin: bool = False,\n    background_relogin_interval: int = 60 * 60 * 24 * 6,\n    background_refresh_token: bool = False,\n    background_refresh_token_interval: int = 60 * 13,\n):\n    \"\"\"\n    Constructor.\n\n    Args:\n        api_key (str): API key.\n        api_secret (str): API secret.\n        access_token (str): Access token.\n        refresh_token (str): Refresh token.\n        requests_params (dict): Requests params.\n        background_relogin (bool): Background refresh.\n        background_relogin_interval (int): Background refresh interval.\n        background_refresh_token (bool): Background refresh token.\n        background_refresh_token_interval (int): Background refresh token interval.\n\n    Notes:\n        If `api_key` and `api_secret` are not provided, they will be read from the environment variables\n        `BITPIN_API_KEY` and `BITPIN_API_SECRET` respectively.\n\n        If `access_token` and `refresh_token` are not provided, they will be read from the environment variables\n        `BITPIN_ACCESS_TOKEN` and `BITPIN_REFRESH_TOKEN` respectively.\n\n        If `requests_params` are provided, they will be used as default for every request.\n\n        If `requests_params` are provided in method's `kwargs`, they will override existing `requests_params`.\n\n        If `background_relogin` is enabled, access token will be refreshed in background every\n        `background_relogin_interval` seconds.\n\n        If `background_refresh_token` is enabled, refresh token will be refreshed in background every\n        `background_refresh_token_interval` seconds.\n    \"\"\"\n\n    self.api_key = api_key or os.environ.get(\"BITPIN_API_KEY\")\n    self.api_secret = api_secret or os.environ.get(\"BITPIN_API_SECRET\")\n    self.access_token: t.OptionalStr = access_token or os.environ.get(\"BITPIN_ACCESS_TOKEN\")\n    self.refresh_token: t.OptionalStr = refresh_token or os.environ.get(\"BITPIN_REFRESH_TOKEN\")\n\n    self._background_relogin = background_relogin\n    self._background_relogin_interval = background_relogin_interval\n    self._background_refresh_token = background_refresh_token\n    self._background_refresh_token_interval = background_refresh_token_interval\n\n    self._requests_params = requests_params\n    self.session = self._init_session()\n</code></pre>"},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient.cancel_order","title":"<code>cancel_order(order_id, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Cancel order.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>str</code> <p>Order ID.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>CancelOrderResponse</code> <p>Response.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>@abstractmethod\ndef cancel_order(self, order_id: str, **kwargs) -&gt; t.CancelOrderResponse:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Cancel order.\n\n    Args:\n        order_id (str): Order ID.\n\n    Returns:\n        dict: Response.\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient.close_connection","title":"<code>close_connection()</code>  <code>abstractmethod</code>","text":"<p>Close connection.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>@abstractmethod\ndef close_connection(self) -&gt; None:\n    \"\"\"Close connection.\"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient.create_order","title":"<code>create_order(market, amount1, price, mode, type, identifier=None, price_limit=None, price_stop=None, price_limit_oco=None, amount2=None, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Create order.</p> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>int</code> <p>Market.</p> required <code>amount1</code> <code>float</code> <p>Amount1.</p> required <code>price</code> <code>float</code> <p>Price.</p> required <code>mode</code> <code>str</code> <p>Mode.</p> required <code>type</code> <code>str</code> <p>Type.</p> required <code>identifier</code> <code>str</code> <p>Identifier.</p> <code>None</code> <code>price_limit</code> <code>float</code> <p>Price limit.</p> <code>None</code> <code>price_stop</code> <code>float</code> <p>Price stop.</p> <code>None</code> <code>price_limit_oco</code> <code>float</code> <p>Price limit oco.</p> <code>None</code> <code>amount2</code> <code>float</code> <p>Amount2.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>CreateOrderResponse</code> <p>Response.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>@abstractmethod\ndef create_order(  # type: ignore[no-untyped-def]\n    self,\n    market: int,\n    amount1: float,\n    price: float,\n    mode: t.OrderModes,\n    type: t.OrderTypes,  # pylint: disable=redefined-builtin\n    identifier: t.OptionalStr = None,\n    price_limit: t.OptionalFloat = None,\n    price_stop: t.OptionalFloat = None,\n    price_limit_oco: t.OptionalFloat = None,\n    amount2: t.OptionalFloat = None,\n    **kwargs,\n) -&gt; t.CreateOrderResponse:\n    \"\"\"\n    Create order.\n\n    Args:\n        market (int): Market.\n        amount1 (float): Amount1.\n        price (float): Price.\n        mode (str): Mode.\n        type (str): Type.\n        identifier (str): Identifier.\n        price_limit (float): Price limit.\n        price_stop (float): Price stop.\n        price_limit_oco (float): Price limit oco.\n        amount2 (float): Amount2.\n\n    Returns:\n        dict: Response.\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient.get_currencies_info","title":"<code>get_currencies_info(page=1, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Get currencies info.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>DictStrAny</code> <p>Response.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>@abstractmethod\ndef get_currencies_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get currencies info.\n\n    Args:\n        page (int): Page.\n\n    Returns:\n        dict: Response.\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient.get_markets_info","title":"<code>get_markets_info(page=1, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Get markets info.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>DictStrAny</code> <p>Response.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>@abstractmethod\ndef get_markets_info(self, page: int = 1, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get markets info.\n\n    Args:\n        page (int): Page.\n\n    Returns:\n        dict: Response.\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient.get_orderbook","title":"<code>get_orderbook(market_id, type, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Get orderbook.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> required <code>type</code> <code>str</code> <p>Type.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>OrderbookResponse</code> <p>Response.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>@abstractmethod\ndef get_orderbook(self, market_id: int, type: t.OrderTypes, **kwargs) -&gt; t.OrderbookResponse:  # type: ignore[no-untyped-def]  # pylint: disable=redefined-builtin\n    \"\"\"\n    Get orderbook.\n\n    Args:\n        market_id (int): Market ID.\n        type (str): Type.\n\n    Returns:\n        dict: Response.\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient.get_recent_trades","title":"<code>get_recent_trades(market_id, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Get recent trades.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>TradeResponse</code> <p>Response.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>@abstractmethod\ndef get_recent_trades(self, market_id: int, **kwargs) -&gt; t.TradeResponse:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get recent trades.\n\n    Args:\n        market_id (int): Market ID.\n\n    Returns:\n        dict: Response.\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient.get_user_info","title":"<code>get_user_info(**kwargs)</code>  <code>abstractmethod</code>","text":"<p>Get user info.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>DictStrAny</code> <p>Response.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>@abstractmethod\ndef get_user_info(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get user info.\n\n    Returns:\n        dict: Response.\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient.get_user_orders","title":"<code>get_user_orders(market_id=None, type=None, state=None, mode=None, identifier=None, page=1, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Get user orders.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> <code>None</code> <code>type</code> <code>str</code> <p>Type.</p> <code>None</code> <code>state</code> <code>str</code> <p>State.</p> <code>None</code> <code>mode</code> <code>str</code> <p>Mode.</p> <code>None</code> <code>identifier</code> <code>str</code> <p>Identifier.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>OpenOrdersResponse</code> <p>Response.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>@abstractmethod\ndef get_user_orders(  # type: ignore[no-untyped-def]\n    self,\n    market_id: t.OptionalInt = None,\n    type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n    state: t.OptionalStr = None,\n    mode: t.OptionalStr = None,\n    identifier: t.OptionalStr = None,\n    page: int = 1,\n    **kwargs,\n) -&gt; t.OpenOrdersResponse:\n    \"\"\"\n    Get user orders.\n\n    Args:\n        market_id (int): Market ID.\n        type (str): Type.\n        state (str): State.\n        mode (str): Mode.\n        identifier (str): Identifier.\n        page (int): Page.\n\n    Returns:\n        dict: Response.\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient.get_user_trades","title":"<code>get_user_trades(market_id=None, type=None, page=1, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Get user trades.</p> <p>Parameters:</p> Name Type Description Default <code>market_id</code> <code>int</code> <p>Market ID.</p> <code>None</code> <code>type</code> <code>str</code> <p>Type.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>DictStrAny</code> <p>Response.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>@abstractmethod\ndef get_user_trades(  # type: ignore[no-untyped-def]\n    self,\n    market_id: t.OptionalInt = None,\n    type: t.OptionalOrderTypes = None,  # pylint: disable=redefined-builtin\n    page: int = 1,\n    **kwargs,\n) -&gt; t.DictStrAny:\n    \"\"\"\n    Get user trades.\n\n    Args:\n        market_id (int): Market ID.\n        type (str): Type.\n        page (int): Page.\n\n    Returns:\n        dict: Response.\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient.get_wallets","title":"<code>get_wallets(**kwargs)</code>  <code>abstractmethod</code>","text":"<p>Get wallets.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>DictStrAny</code> <p>Response.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>@abstractmethod\ndef get_wallets(self, **kwargs) -&gt; t.DictStrAny:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Get wallets.\n\n    Returns:\n        dict: Response.\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient.login","title":"<code>login(**kwargs)</code>  <code>abstractmethod</code>","text":"<p>Login.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>LoginResponse</code> <p>Response.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>@abstractmethod\ndef login(self, **kwargs) -&gt; t.LoginResponse:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Login.\n\n    Returns:\n        dict: Response.\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/clients/core/#src.bitpin.clients.core.CoreClient.refresh_access_token","title":"<code>refresh_access_token(refresh_token=None, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>Refresh token.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>RefreshTokenResponse</code> <p>Response.</p> Source code in <code>src/bitpin/clients/core.py</code> <pre><code>@abstractmethod\ndef refresh_access_token(self, refresh_token: t.OptionalStr = None, **kwargs) -&gt; t.RefreshTokenResponse:  # type: ignore[no-untyped-def]\n    \"\"\"\n    Refresh token.\n\n    Args:\n        refresh_token (str): Refresh token.\n\n    Returns:\n        dict: Response.\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Here are some snippets to get you started.</p>"},{"location":"usage/#initiate","title":"Initiate","text":"<p>Initiate client.</p> <p>Authentication</p> <p>You can pass <code>api_key</code> and <code>api_secret</code> to client or set them as environment variables.</p> <p>When you pass them to client, they will override environment variables.</p> <p>If <code>api_key</code> and <code>api_secret</code> are provided, client will login automatically and get access and refresh tokens.</p> <p>You can also pass <code>access_token</code> and <code>refresh_token</code> to client to skip login.</p> <p>Environment variables are also supported.</p> <ul> <li> <code>BITPIN_API_KEY</code> - API key.</li> <li> <code>BITPIN_API_SECRET</code> - API secret.</li> <li> <code>BITPIN_ACCESS_TOKEN</code> - Access token.</li> <li> <code>BITPIN_REFRESH_TOKEN</code> - Refresh token.</li> </ul> <p>Background relogin and background refresh access token is supported</p> <p>You can pass below variables to client to enable background relogin and background refresh access token.</p> <ul> <li> <code>background_relogin=bool</code> - If <code>True</code>, client will relogin automatically in background.</li> <li> <code>background_refresh_access_token=int</code> - If <code>True</code>, client will refresh access token automatically in background.</li> <li> <code>background_relogin_interval=bool</code> - Interval between each relogin in seconds.</li> <li> <code>background_refresh_access_token_interval=int</code> - Interval between each refresh access token in seconds.</li> </ul> Note <p>It uses threading.Thread in synchronous client and asyncio.create_task in asynchronous client.</p> Reference <ul> <li>Code Reference: Client</li> </ul> SyncAsync client.py<pre><code>from bitpin import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n</code></pre> client.py<pre><code>import asyncio\nfrom bitpin import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n</code></pre>"},{"location":"usage/#with-request-params","title":"With Request Params","text":"<p>You can pass requests OR aiohttp params to client.</p> SyncAsync with_request_params.py<pre><code>from bitpin import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\", requests_params={\n    \"timeout\": 10\n})\n</code></pre> async_with_request_params.py<pre><code>import asyncio\nfrom bitpin import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\", requests_params={\n    \"timeout\": 10\n})\n</code></pre>"},{"location":"usage/#login","title":"Login","text":"<p>Login to get access and refresh tokens.</p> <p>Warning</p> <p>Access token is valid for 15 minutes and refresh token is valid for 7 days.</p> Reference <ul> <li>Sync Code Reference: Client.login</li> <li>Async Code Reference: AsyncClient.login</li> <li>API Documentation Reference: Login</li> </ul> SyncAsync login.py<pre><code>from bitpin import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    login = client.login()\n    print(login)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> login_async.py<pre><code>import asyncio\nfrom bitpin import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    login = await client.login()\n    print(login)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{\n    \"refresh\": \"eyJ0eXAiOiJKV....kIjoyLCJpcCI6IjE3Mi4xOC4wLjEifQ.LJd44M3...-0CiH2gokd_OWGBN3UnI\",\n    \"access\": \"eyJ0eXAiOiJKV1Q....JqdGkiOiI3ZmM0YWY2ZjY1N2Y0MDU5YWRlNTY3...iNjMxZSI8UpTDxOS_utTTZW36W0KgU\"\n}\n</code></pre>"},{"location":"usage/#refresh-token","title":"Refresh Token","text":"<p>Refresh access token.</p> Reference <ul> <li>Sync Code Reference: Client.refresh_access_token</li> <li>Async Code Reference: AsyncClient.refresh_access_token</li> <li>API Documentation Reference: Refresh Token</li> </ul> SyncAsync refresh_access_token.py<pre><code>from bitpin import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    refresh = client.refresh_access_token()\n    print(refresh)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> refresh_access_token_async.py<pre><code>import asyncio\nfrom bitpin import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    refresh = await client.refresh_access_token()\n    print(refresh)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{\n    \"access\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI...mozL60Q6kK3j56MtYQy_95hEn6VQPDZw\"\n}\n</code></pre>"},{"location":"usage/#get-user-info","title":"Get User Info","text":"<p>Get user info.</p> Reference <ul> <li>Sync Code Reference: Client.get_user_info</li> <li>Async Code Reference: AsyncClient.get_user_info</li> <li>API Documentation Reference: Get User Info</li> </ul> SyncAsync get_user_info.py<pre><code>from bitpin import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    user_info = client.get_user_info()\n    print(user_info)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_user_info_async.py<pre><code>import asyncio\nfrom bitpin import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    user_info = await client.get_user_info()\n    print(user_info)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{'user_identifier': 'XXXXXXXX', 'enable_limit_msg': True, 'enable_market_msg': True, 'enable_oco_msg': True, 'enable_stop_limit_msg': True, 'is_chart': False, 'is_classic': False, 'is_english_number': False, 'is_light': False, 'is_vertical': True, 'phone': '09123456789', 'todos': [], 'last_login_time': '2020-01-1T12:00:00.148151Z', 'state': 'accepted', 'is_phone_confirmed': True, 'is_email_confirmed': True, 'first_name': '\u062c\u0627\u0646', 'last_name': '\u062f\u0648', 'fullname': '\u062c\u0627\u0646 \u062f\u0648', 'birth_date_text': '1360-1-1', 'sex': 'man', 'home_phone': '', 'address': '', 'email': 'johndoe@gmail.com', 'two_factor_auth_enabled': True, 'two_factor_auth_type': 'email', 'level': {'id': 6, 'title': '\u0633\u0637\u062d \u06f6', 'required_score': 1000000000, 'order': 6, 'income_percent_per_transaction': 30, 'max_daily_withdraw': 800000000}, 'company_name': '', 'type': 'iranian', 'review_step': 1, 'accepted_step': 4, 'level_score': 1761017021, 'daily_withdraw': 0, 'daily_deposit': 0, 'monthly_withdraw': 0, 'remaining_daily_withdraw': 1000000, 'remaining_daily_deposit': 1000000000, 'remaining_monthly_withdraw': 30000000, 'announcement': None, 'accepted_step_4_temp': False, 'accepted_step_5_temp': False, 'tetherban': False}\n</code></pre>"},{"location":"usage/#get-currencies-list","title":"Get Currencies List","text":"<p>Get currencies list.</p> <p>Warning</p> <p> 10000/day or 200/minute if you are authenticated.</p> Reference <ul> <li>Sync Code Reference: Client.get_currencies_list</li> <li>Async Code Reference: AsyncClient.get_currencies_list</li> <li>API Documentation Reference: Get Currencies List</li> </ul> SyncAsync get_currencies_list.py<pre><code>from bitpin import Client\n\nclient = Client()\n\n\ndef main():\n    currencies_list = client.get_currencies_info()\n    print(currencies_list)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_currencies_list_async.py<pre><code>import asyncio\nfrom bitpin import AsyncClient\n\nclient = AsyncClient()\n\n\nasync def main():\n    currencies_list = await client.get_currencies_info()\n    print(currencies_list)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{'count': 120, 'next': None, 'previous': None, 'results': [{'id': 2, 'title': 'Toman', 'title_fa': '\u062a\u0648\u0645\u0627\u0646', 'code': 'IRT', 'image': 'https://cdn.bitpin.ir/media/market/currency/1610698086.png', 'min_withdraw': '12000', 'price_info': {}, 'price_info_usdt': {}, 'color': '00fd22', 'withdraw_commission': 0.0002, 'withdraw_commission_type': 'percent', 'max_withdraw_commission': '6000', 'tradable': True, 'for_test': False, 'decimal': 0, 'decimal_amount': 0, 'decimal_irt': 1, 'high_risk': False, 'show_high_risk': False}, {'id': 92, 'title': 'VeThor Token', 'title_fa': '\u0648\u062a\u0648\u0631', 'code': 'VTHO', 'image': 'https://cdn.bitpin.ir/media/market/currency/1634905227.svg', 'min_withdraw': '0', 'price_info': {'price': '0', 'time': '0', 'change': -0.0417, 'min': '0', 'max': '0', 'mean': '0', 'value': '0', 'amount': '0', 'market_value': '0', 'market_amount': '0'}, 'price_info_usdt': {'price': '0', 'time': '0', 'change': -0.044800000000000006, 'min': '0', 'max': '0', 'mean': '0', 'value': '0', 'amount': '0', 'market_value': '0', 'market_amount': '0'}, 'color': '7f81ba', 'withdraw_commission': '0', 'withdraw_commission_type': 'value', 'max_withdraw_commission': '0', 'tradable': True, 'for_test': False, 'decimal': 6, 'decimal_amount': 0, 'decimal_irt': 1, 'high_risk': False, 'show_high_risk': False}]}\n</code></pre>"},{"location":"usage/#get-markets-info","title":"Get Markets Info","text":"<p>Get markets info.</p> <p>Warning</p> <p> 10000/day or 200/minute if you are authenticated.</p> Reference <ul> <li>Sync Code Reference: Client.get_markets_info</li> <li>Async Code Reference: AsyncClient.get_markets_info</li> <li>API Documentation Reference: Get Markets Info</li> </ul> SyncAsync get_markets_info.py<pre><code>from bitpin import Client\n\nclient = Client()\n\n\ndef main():\n    markets_info = client.get_markets_info()\n    print(markets_info)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_markets_info_async.py<pre><code>import asyncio\nfrom bitpin import AsyncClient\n\nclient = AsyncClient()\n\n\nasync def main():\n    markets_info = await client.get_markets_info()\n    print(markets_info)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{'count': 231, 'next': 'https://api.bitpin.ir/v1/mkt/markets/?page=2', 'previous': None, 'results': [{'id': 1, 'currency1': {'id': 1, 'title': 'Bitcoin', 'title_fa': '\u0628\u06cc\u062a \u06a9\u0648\u06cc\u0646', 'code': 'BTC', 'tradable': True, 'for_test': False, 'image': 'https://cdn.bitpin.ir/media/market/currency/1628415570.svg', 'decimal': 2, 'decimal_amount': 8, 'decimal_irt': 0, 'color': 'f7931a', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '0.000550000000000000', 'tags': []}, 'currency2': {'id': 2, 'title': 'Toman', 'title_fa': '\u062a\u0648\u0645\u0627\u0646', 'code': 'IRT', 'tradable': True, 'for_test': False, 'image': 'https://cdn.bitpin.ir/media/market/currency/1610698086.png', 'decimal': 0, 'decimal_amount': 0, 'decimal_irt': 1, 'color': '00fd22', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '0.000200000000000000', 'tags': []}, 'tradable': True, 'for_test': False, 'otc_sell_percent': '0.00800', 'otc_buy_percent': '0.00800', 'otc_max_buy_amount': '0.030000000000000000', 'otc_max_sell_amount': '0.030000000000000000', 'order_book_info': {'created_at': None, 'price': '1018041176', 'change': -0.0023, 'min': '975697937', 'max': '1024609580', 'time': '2022-03-08T13:54:52.000Z', 'mean': '1004787964', 'value': '10303509406', 'amount': '10.25013963'}, 'internal_price_info': {'created_at': 1646747693.366072, 'price': '1018041176', 'change': -0.2399, 'min': '975697937', 'max': '1028000000', 'time': None, 'mean': None, 'value': None, 'amount': None}, 'price_info': {'created_at': 1646747763.388, 'price': '1019566443', 'change': -0.05, 'min': '975067512', 'max': '1030178774', 'time': None, 'mean': None, 'value': None, 'amount': None}, 'price': '1019566443', 'title': 'Bitcoin/Toman', 'code': 'BTC_IRT', 'title_fa': '\u0628\u06cc\u062a \u06a9\u0648\u06cc\u0646/\u062a\u0648\u0645\u0627\u0646', 'trading_view_source': 'BINANCE', 'otc_market': False}, {'id': 2, 'currency1': {'id': 1, 'title': 'Bitcoin', 'title_fa': '\u0628\u06cc\u062a \u06a9\u0648\u06cc\u0646', 'code': 'BTC', 'tradable': True, 'for_test': False, 'image': 'https://cdn.bitpin.ir/media/market/currency/1628415570.svg', 'decimal': 2, 'decimal_amount': 8, 'decimal_irt': 0, 'color': 'f7931a', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '0.000550000000000000', 'tags': []}, 'currency2': {'id': 4, 'title': 'Tether', 'title_fa': '\u062a\u062a\u0631', 'code': 'USDT', 'tradable': True, 'for_test': False, 'image': 'https://cdn.bitpin.ir/media/market/currency/1628416117.svg', 'decimal': 1, 'decimal_amount': 2, 'decimal_irt': 0, 'color': '26a17b', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '25.000000000000000000', 'tags': [{'name': '\u0627\u0633\u062a\u06cc\u0628\u0644 \u06a9\u0648\u06cc\u0646'}]}, 'tradable': True, 'for_test': False, 'otc_sell_percent': '0.00800', 'otc_buy_percent': '0.00800', 'otc_max_buy_amount': '0.033000000000000000', 'otc_max_sell_amount': '0.033000000000000000', 'order_book_info': {'created_at': None, 'price': '38815.88', 'change': -0.003, 'min': '37105.02', 'max': '39611.63', 'time': '2022-03-08T13:44:19.000Z', 'mean': '38461.02', 'value': '330372.37', 'amount': '8.57852165'}, 'internal_price_info': {'created_at': 1646747059.672099, 'price': '38815.88', 'change': -0.3099, 'min': '37105.02', 'max': '39611.63', 'time': None, 'mean': None, 'value': None, 'amount': None}, 'price_info': {'created_at': 1646747763.388, 'price': '38905.84', 'change': -0.2399, 'min': '37167.14', 'max': '39532.19', 'time': None, 'mean': None, 'value': None, 'amount': None}, 'price': '38905.84', 'title': 'Bitcoin/Tether', 'code': 'BTC_USDT', 'title_fa': '\u0628\u06cc\u062a \u06a9\u0648\u06cc\u0646/\u062a\u062a\u0631', 'trading_view_source': 'BINANCE', 'otc_market': False}]}\n</code></pre>"},{"location":"usage/#get-wallets","title":"Get Wallets","text":"<p>Get wallets and balances.</p> <p>Warning</p> <p> 10000/day.</p> Reference <ul> <li>Sync Code Reference: Client.get_wallets</li> <li>Async Code Reference: AsyncClient.get_wallets</li> <li>API Documentation Reference: Get Wallets</li> </ul> SyncAsync get_wallets.py<pre><code>from bitpin import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    wallets = client.get_wallets()\n    print(wallets)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_wallets_async.py<pre><code>import asyncio\nfrom bitpin import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    wallets = await client.get_wallets()\n    print(wallets)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{'count': 112, 'next': None, 'previous': None, 'results': [{'id': 3108164, 'currency': {'id': 50, 'title': 'Harmony', 'title_fa': '\u0647\u0627\u0631\u0645\u0648\u0646\u06cc', 'code': 'ONE', 'tradable': True, 'for_test': False, 'image': 'https://cdn.bitpin.ir/media/market/currency/1628418817.svg', 'decimal': 5, 'decimal_amount': 1, 'decimal_irt': 1, 'color': '56edc5', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '0.000000000000000000', 'tags': []}, 'balance': '1671.6', 'frozen': '0.0', 'total': '1671.6', 'value': '5678468', 'value_frozen': '0', 'value_total': '5678468', 'usdt_value': '216.79', 'usdt_value_frozen': '0.00', 'usdt_value_total': '216.79', 'address': '', 'inviter_commission': '0.0', 'daily_withdraw': '0.0', 'remaining_daily_withdraw': '10000000.0'}, {'id': 3108166, 'currency': {'id': 47, 'title': 'Celer Network', 'title_fa': '\u0633\u0644\u0631 \u0646\u062a\u0648\u0631\u06a9', 'code': 'CELR', 'tradable': True, 'for_test': False, 'image': 'https://cdn.bitpin.ir/media/market/currency/1628418961.png', 'decimal': 5, 'decimal_amount': 1, 'decimal_irt': 1, 'color': 'e3e3e3', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '0.000000000000000000', 'tags': []}, 'balance': '5631.6', 'frozen': '0.0', 'total': '5631.6', 'value': '5540368', 'value_frozen': '0', 'value_total': '5540368', 'usdt_value': '211.52', 'usdt_value_frozen': '0.00', 'usdt_value_total': '211.52', 'address': '', 'inviter_commission': '0.0', 'daily_withdraw': '0.0', 'remaining_daily_withdraw': '10000000.0'}]}\n</code></pre>"},{"location":"usage/#get-orderbook","title":"Get Orderbook","text":"<p>Get orderbook.</p> Reference <ul> <li>Sync Code Reference: Client.get_orderbook</li> <li>Async Code Reference: AsyncClient.get_orderbook</li> <li>API Documentation Reference: Get Orderbook</li> </ul> SyncAsync get_orderbook.py<pre><code>from bitpin import Client\n\nclient = Client()\n\n\ndef main():\n    orderbook = client.get_orderbook(1, \"buy\")\n    print(orderbook)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_orderbook_async.py<pre><code>import asyncio\nfrom bitpin import AsyncClient\n\nclient = AsyncClient()\n\n\nasync def main():\n    orderbook = await client.get_orderbook(1, \"buy\")\n    print(orderbook)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{'orders': [{'amount': '0.00793177', 'remain': '0.00340995', 'price': '1020020001', 'value': '3478225'}, {'amount': '0.04110803', 'remain': '0.03143967', 'price': '1020020000', 'value': '32069099'}, {'amount': '0.00437797', 'remain': '0.00437797', 'price': '1020000000', 'value': '4465528'}], 'volume': '93412.67506888'}\n</code></pre>"},{"location":"usage/#get-recent-trades","title":"Get Recent Trades","text":"<p>Get recent trades.</p> Reference <ul> <li>Sync Code Reference: Client.get_recent_trades</li> <li>Async Code Reference: AsyncClient.get_recent_trades</li> <li>API Documentation Reference: Get Recent Trades</li> </ul> SyncAsync get_recent_trades.py<pre><code>from bitpin import Client\n\nclient = Client()\n\n\ndef main():\n    recent_trades = client.get_recent_trades(1)\n    print(recent_trades)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_recent_trades_async.py<pre><code>import asyncio\nfrom bitpin import AsyncClient\n\nclient = AsyncClient()\n\n\nasync def main():\n    recent_trades = await client.get_recent_trades(1)\n    print(recent_trades)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>[{'time': 1647174307.768419, 'price': '1019000000', 'value': '11075213', 'match_amount': '0.01086870', 'type': 'sell', 'match_id': '73802972_73807087'}, {'time': 1647174307.656013, 'price': '1019000000', 'value': '5859993', 'match_amount': '0.00575072', 'type': 'sell', 'match_id': '73802711_73807087'}, {'time': 1647174307.605909, 'price': '1019000000', 'value': '18496580', 'match_amount': '0.01815169', 'type': 'sell', 'match_id': '73769110_73807087'}, {'time': 1647174307.547822, 'price': '1020000000', 'value': '4365538', 'match_amount': '0.00427993', 'type': 'sell', 'match_id': '73783129_73807087'}, {'time': 1647174307.497821, 'price': '1020020000', 'value': '883459', 'match_amount': '0.00086611', 'type': 'sell', 'match_id': '73800260_73807087'}]\n</code></pre>"},{"location":"usage/#get-user-orders","title":"Get User Orders","text":"<p>Get user orders.</p> <p>Warning</p> <p> 1000/hour.</p> Reference <ul> <li>Sync Code Reference: Client.get_user_orders</li> <li>Async Code Reference: AsyncClient.get_user_orders</li> <li>API Documentation Reference: Get User Orders</li> </ul> SyncAsync get_user_orders.py<pre><code>from bitpin import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\ndef main():\n    user_orders = client.get_user_orders()\n    print(user_orders)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_user_orders_async.py<pre><code>import asyncio\nfrom bitpin import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    user_orders = await client.get_user_orders()\n    print(user_orders)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{'count': 0, 'next': 'https://api.bitpin.ir/v1/odr/orders/?page=2', 'previous': None, 'results': [{'id': 230701011, 'market': {'id': 5, 'currency1': {'id': 4, 'title': 'Tether', 'title_fa': '\u062a\u062a\u0631', 'code': 'USDT', 'tradable': True, 'for_test': False, 'image': 'https://cdn.bitpin.ir/media/market/currency/1628416117.svg', 'decimal': 1, 'decimal_amount': 2, 'decimal_irt': 0, 'color': '26a17b', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '25.000000000000000000', 'tags': [{'name': '\u0627\u0633\u062a\u06cc\u0628\u0644 \u06a9\u0648\u06cc\u0646'}]}, 'currency2': {'id': 2, 'title': 'Toman', 'title_fa': '\u062a\u0648\u0645\u0627\u0646', 'code': 'IRT', 'tradable': True, 'for_test': False, 'image': 'https://cdn.bitpin.ir/media/market/currency/1684671406.svg', 'decimal': 0, 'decimal_amount': 0, 'decimal_irt': 1, 'color': '00fd22', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '0.000200000000000000', 'tags': []}, 'code': 'USDT_IRT', 'title': 'Tether/Toman', 'title_fa': '\u062a\u062a\u0631/\u062a\u0648\u0645\u0627\u0646', 'commissions': {'sell': 0.0001, 'buy': 0.0002, 'taker': 0.0002, 'maker': 0.0001}}, 'amount1': '515.13', 'amount2': '25724046', 'price': '49937', 'price_limit': '49937', 'price_stop': None, 'price_limit_oco': None, 'type': 'sell', 'active_limit': '49937', 'identifier': None, 'mode': 'limit', 'expected_gain': '25724046', 'expected_resource': '515.13', 'commission_percent': 0.0001, 'user_share_percent': 0.9999, 'expected_commission': '2572', 'expected_user_gain': '25721473', 'expected_user_price': '49932', 'gain_currency': {'id': 2, 'title': 'Toman', 'title_fa': '\u062a\u0648\u0645\u0627\u0646', 'code': 'IRT', 'tradable': True, 'for_test': False, 'image': 'https://cdn.bitpin.ir/media/market/currency/1684671406.svg', 'decimal': 0, 'decimal_amount': 0, 'decimal_irt': 1, 'color': '00fd22', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '0.000200000000000000', 'tags': []}, 'resource_currency': {'id': 4, 'title': 'Tether', 'title_fa': '\u062a\u062a\u0631', 'code': 'USDT', 'tradable': True, 'for_test': False, 'image': 'https://cdn.bitpin.ir/media/market/currency/1628416117.svg', 'decimal': 1, 'decimal_amount': 2, 'decimal_irt': 0, 'color': '26a17b', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '25.000000000000000000', 'tags': [{'name': '\u0627\u0633\u062a\u06cc\u0628\u0644 \u06a9\u0648\u06cc\u0646'}]}, 'fulfilled': 0.61, 'exchanged1': '312.90', 'exchanged2': '15625405', 'gain': '15625405', 'resource': '312.90', 'remain_amount': '202.22', 'average_price': '49937', 'average_user_price': '49932', 'commission': '1562', 'user_commission': '1562', 'user_gain': '15623842', 'created_at': '2023-08-28T17:50:16.898905+03:30', 'activated_at': '2023-08-28T17:50:16.898610+03:30', 'state': 'active', 'req_to_cancel': False, 'info': {'otc_network': 0, 'send_to_order_book_task_id': 'cf554186-0511-4b5b-b067-3936d1a56ce7'}, 'closed_at': None, 'external_address': ''}]}\n</code></pre>"},{"location":"usage/#create-order","title":"Create Order","text":"<p>Create New Order.</p> <p>Warning</p> <p> 1000/hour.</p> Reference <ul> <li>Sync Code Reference: Client.create_order</li> <li>Async Code Reference: AsyncClient.create_order</li> <li>API Documentation Reference: Create Order</li> </ul> SyncAsync create_order.py<pre><code>from bitpin import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    order = client.create_order(\n        market=5,\n        type=\"buy\",\n        mode=\"limit\",\n        amount1=10,\n        price=50000,\n        price_limit=50000,\n    )\n    print(order)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> create_order_async.py<pre><code>import asyncio\nfrom bitpin import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    order = await client.create_order(\n        market=5,\n        type=\"buy\",\n        mode=\"limit\",\n        amount1=10,\n        price=50000,\n        price_limit=50000,\n    )\n    print(order)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{'id': 230701370, 'market': {'id': 5, 'currency1': {'id': 4, 'title': 'Tether', 'title_fa': '\u062a\u062a\u0631', 'code': 'USDT', 'tradable': True, 'for_test': False, 'image': 'https://cdn.bitpin.ir/media/market/currency/1628416117.svg', 'decimal': 1, 'decimal_amount': 2, 'decimal_irt': 0, 'color': '26a17b', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '25.000000000000000000', 'tags': [{'name': '\u0627\u0633\u062a\u06cc\u0628\u0644 \u06a9\u0648\u06cc\u0646'}]}, 'currency2': {'id': 2, 'title': 'Toman', 'title_fa': '\u062a\u0648\u0645\u0627\u0646', 'code': 'IRT', 'tradable': True, 'for_test': False, 'image': 'https://cdn.bitpin.ir/media/market/currency/1684671406.svg', 'decimal': 0, 'decimal_amount': 0, 'decimal_irt': 1, 'color': '00fd22', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '0.000200000000000000', 'tags': []}, 'code': 'USDT_IRT', 'title': 'Tether/Toman', 'title_fa': '\u062a\u062a\u0631/\u062a\u0648\u0645\u0627\u0646', 'commissions': {'sell': 0.0001, 'buy': 0.0002, 'taker': 0.0002, 'maker': 0.0001}}, 'amount1': '3.00', 'amount2': '148800', 'price': '49600', 'price_limit': '49600', 'price_stop': None, 'price_limit_oco': None, 'type': 'buy', 'active_limit': '49600', 'identifier': None, 'mode': 'limit', 'expected_gain': '3.00', 'expected_resource': '148800', 'commission_percent': 0.0001, 'user_share_percent': 0.9999, 'expected_commission': '0.00', 'expected_user_gain': '2.99', 'expected_user_price': '49604', 'gain_currency': {'id': 4, 'title': 'Tether', 'title_fa': '\u062a\u062a\u0631', 'code': 'USDT', 'tradable': True, 'for_test': False, 'image': 'https://cdn.bitpin.ir/media/market/currency/1628416117.svg', 'decimal': 1, 'decimal_amount': 2, 'decimal_irt': 0, 'color': '26a17b', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '25.000000000000000000', 'tags': [{'name': '\u0627\u0633\u062a\u06cc\u0628\u0644 \u06a9\u0648\u06cc\u0646'}]}, 'resource_currency': {'id': 2, 'title': 'Toman', 'title_fa': '\u062a\u0648\u0645\u0627\u0646', 'code': 'IRT', 'tradable': True, 'for_test': False, 'image': 'https://cdn.bitpin.ir/media/market/currency/1684671406.svg', 'decimal': 0, 'decimal_amount': 0, 'decimal_irt': 1, 'color': '00fd22', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '0.000200000000000000', 'tags': []}, 'fulfilled': 0.0, 'exchanged1': '0.00', 'exchanged2': '0', 'gain': '0.00', 'resource': '0', 'remain_amount': '3.00', 'average_price': '0', 'average_user_price': '0', 'commission': '0.00', 'user_commission': '0.00', 'user_gain': '0.00', 'created_at': '2023-08-28T17:51:57.333028+03:30', 'activated_at': '2023-08-28T17:51:57.332722+03:30', 'state': 'active', 'req_to_cancel': False, 'info': {'otc_network': 0, 'send_to_order_book_task_id': 'bc6a2856-d58b-492a-ac34-7161c6412350'}, 'closed_at': None, 'external_address': ''}\n</code></pre>"},{"location":"usage/#cancel-order","title":"Cancel Order","text":"<p>Cancel Order.</p> <p>Warning</p> <p> 1000/hour.</p> Reference <ul> <li>Sync Code Reference: Client.cancel_order</li> <li>Async Code Reference: AsyncClient.cancel_order</li> <li>API Documentation Reference: Cancel Order</li> </ul> SyncAsync cancel_order.py<pre><code>from bitpin import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    order = client.cancel_order(\"230008812\")\n    print(order)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> cancel_order_async.py<pre><code>import asyncio\nfrom bitpin import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    order = await client.cancel_order(\"230008812\")\n    print(order)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{'status': 'success', 'id': '230701370'}\n</code></pre>"},{"location":"usage/#get-user-recent-trades","title":"Get User Recent Trades","text":"<p>Get user recent trades.</p> <p>Warning</p> <p> 1000/hour.</p> Reference <ul> <li>Sync Code Reference: Client.get_user_trades</li> <li>Async Code Reference: AsyncClient.get_user_trades</li> <li>API Documentation Reference: Get User Recent Trades</li> </ul> SyncAsync get_user_trades.py<pre><code>from bitpin import Client\n\nclient = Client(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\ndef main():\n    user_trades = client.get_user_trades()\n    print(user_trades)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> get_user_trades_async.py<pre><code>import asyncio\nfrom bitpin import AsyncClient\n\nclient = AsyncClient(\"&lt;API_KEY&gt;\", \"&lt;API_SECRET&gt;\")\n\n\nasync def main():\n    user_trades = await client.get_user_trades()\n    print(user_trades)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> output<pre><code>{'count': 1179, 'next': 'https://api.bitpin.ir/v1/odr/matches/?market=&amp;type=&amp;page=2', 'previous': None, 'results': [{'id': 3482, 'exchanged1': '1.00100000', 'exchanged2': '1001000000', 'price': '1000000000', 'market': {'id': 2, 'currency1': {'id': 1, 'title': 'btc', 'title_fa': 'btc', 'code': 'BTC', 'tradable': True, 'for_test': False, 'image': None, 'decimal': 1, 'decimal_amount': 6, 'decimal_irt': 1, 'color': '', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '0.000000000000000000', 'tags': []}, 'currency2': {'id': 3, 'title': 'irt', 'title_fa': 'irt', 'code': 'IRT', 'tradable': True, 'for_test': False, 'image': None, 'decimal': 1, 'decimal_amount': 6, 'decimal_irt': 1, 'color': '', 'high_risk': False, 'show_high_risk': False, 'withdraw_commission': '0.000000000000000000', 'tags': []}, 'code': 'BTC_IRT', 'title': 'btc/irt', 'title_fa': 'btc/irt', 'commissions': {'sell': 0.0, 'buy': 0.0, 'taker': 0.0, 'maker': 0.0}}, 'created_at': '2022-04-10T14:20:01.574922+04:30', 'type': 'sell', 'commission': '0', 'user_type': 'sell', 'user_gain': '1001000000'}]}\n</code></pre>"},{"location":"usage/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Usage</li> </ul>"}]}